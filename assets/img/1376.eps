%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: gm_bcgr_lin_003_062_page.eps
%%Creator: Adobe Illustrator(R) 16.0
%%For: Zydd
%%CreationDate: 8/31/2017
%%BoundingBox: 0 0 1000 1000
%%HiResBoundingBox: 0 0 1000 1000
%%CropBox: 0 0 1000 1000
%%LanguageLevel: 3
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 16.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 16.0.0 x682 R agm 4.6676 ct 5.2591%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
3 3010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.3-c011 66.145661, 2012/02/06-14:56:27        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS6 (Windows)</xmp:CreatorTool>
         <xmp:CreateDate>2017-08-31T12:14:19+02:00</xmp:CreateDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEBaAFoAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABaAAAAAEA&#xA;AQFoAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A6nirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdiq+C&#xA;IyzRxA0MjBQT25GmKplJoEiPxMwO1fsn+uTELjbTPMIi1NNGdmZRKPhNOnj9OSliIAPe0jWA9Fkm&#xA;llHC+oDyBNaeH05IYC3SzAC0HOqwsVJJoabD+3JHTEdWuGqEjVLI2R1Ygkca9v5RXxzEyS4XYRwk&#xA;mlGe8iiXkQxFK7AeNPHKo5wTTnR7LkRdhATeY7WKRYzE5LHiDt2NPHJeK5P8hT4b4gqLrlsbf1uD&#xA;0pyptX7XHxy2HqNOP/JUu8L4NYt5jQI4+yN6ftfTkM0+Dm0nQSurR8RSSNnBIC12p4CvjmHDXxka&#xA;pT2fIdQprcRGYxfFUAGtB3p7++Z0TYtj+Sl3oiaJYjQsT16Dw+nBilxshoJE1aElu4o61DGg5dB4&#xA;08c2GLQSn1bo9lSJqwh4dYt5ZGQI4KnjXbxp45cey5VdhsPY0wL4giUu4n6BhtXoPGnjmOdGQatw&#xA;cukMOqw38IkKcWqCFrt+19OQlpSOriT9KsJY6038eg/riNMau0A3G0bb2HrKCHpUA7jx+nKckOEW&#xA;w8RcNOJjZ/U2Wu1PD6cjMcKRNCqqtM0VTVBUmny9/fIcS8bTrwdkO5UkV+WSZtYq7FXYq7FXYq7F&#xA;XYq7FXYq7FVfT/8Ae+2/4yp/xIYlBZTcq3qg0NONa/TTLoH924ef6ShYP76X5j+OW5Ppi4MeaGuf&#xA;79P9Vv1HLRzc3L9JSi6t5553WGNpGBBIUEmhovb3IyczQcfTD1fBC2393J85P+I5qNVz+D0mLmPe&#xA;EBqH91/sR/xLMPF9fwegxfSPexy//wB6ov8AjIf1jLurtT/d/BFJ/wAcz/Yf8zcysH1B1h/T+hW0&#xA;77f0xfqOUa39bgy+osktP95ZP9l/xHNJg+sMpckJH/va/wDqD9S50GL6Q1JnffaHybI6T9LOH1BJ&#xA;7vq/+oP+JjOm0fIOfi+v8dyChsL22lMs8LxRzSfumYUDUoxpXrs6/fmXxxIIB5Bv8SMokA3QR1v0&#xA;/wBh/wAbZrZ/W6HW9UO3+9Tf68f6sqzOkz9EwX7f0H9RwD6Cxj/dlPtO/ux/qL+rMHUfT8WoL1/3&#xA;mm+bfqGV6jmFCUxf72zf6g/WuY6W7j+/k/12/XlobwsxV2KuxV2KuxV2KuxV2KuxV2Kq+n/7323/&#xA;ABlT/iQxKCzuT/jkS/Mf8SGCDj5v7spJbKzTTcQTQitPpzMyfTF10ASXWoDavaKwqCSCD0IpksnI&#xA;uyjzROkKq+bb9VACiJgAOgAZMhk/uw04RWaXu/UwyD7Mv+tJ/wARzB1PP4O8xcx70v1D+6/2I/4l&#xA;mHi+v4PQYvpHvTqP8ubdtGuNVvZizJCbu0WLbb0S/F6j+Yjp4e+ZYx9XGy9rkyGOI/om/fW346pR&#xA;5H0+01DUrSzu4/Ut5o5hIlSOgcjceBFclA0WWtyGGMyHMEfoUdQght/MGowQqEhiuikaDoFVmAA+&#xA;jKtXycTDImIJ7k/0/TbiTRri+Uj0YmdX33rxWn38s1Wnwk+voGeTMBIR6lKY/wDe1/8AUH6lzd4v&#xA;pCpnffaHybI6T9LOH1Bd5asLS/1wW11H6kLwsWWpG4NRuM3UskoYrjztOsyyxx4omjbJPO2gXF7b&#xA;WktrwSHT1laRDtRAqkcQP+MdMq0OpEDIS5y/H6XB7O1YgZCV3Ovx9rBLKGWVgkSF39NjxUVNFNT9&#xA;wGZOQgS3bdb1Q80bx30kcilZElRXU7EEVBByrKbAdJn6JrHY3bwNdrExtk5K8o+yCANif9mMiJjh&#xA;rqwifQWU+UYo5Jysih1EKkAiu4K5i5uTHHzQI/3nm+bfqynUcwxCURf72zf6g/WuY6W7j+/k/wBd&#xA;v15aG8LMVdirsVdirsVdirsVdirsVdiqvp/+99t/xlT/AIkMSgs7k/45Ev8ArD/iQwQcfN/dlAaH&#xA;/vVef8Yz+vMzL9EXG0n1H3IOz/47Fn/rYcnIuVDmmen6fdxeZr26eMiCSMhJOxLFTt/wJyucwcYH&#xA;VjjxkZSejDdH0u8v3dIEJUyMjyfspyXq2YuoiSQ7WMxE2WbaT5ftYdLit723imm4FJSVDVBcuFqR&#xA;2JyOOFDzRl1MjK4kgInXgBoGogCgFrMAB/xjbJlrwf3kfePveYflv/x39P8A9Sb/AIi+Rjzd92h/&#xA;cy94/Qt1/Tr638wahPPA0cM14TDIworgkt8J77MMp1XJxNPIGIA7mT6L/wAoRqX/ABlb/iMeYuk/&#xA;uT7/ANTXn/v4+79aD8kwQT+YbhJo1kT6ty4sARUPER1zY4/pCNXIiO3f+tVudFupLW4uz+7S2Lh1&#xA;cEE7dvpyOk2PxciOaPHEd6j5L/5SVP8AjA/682+b+5+LLtH+7PvDO9Y/45F9/wAw8v8AxA5gYvrH&#xA;vdNh+uPvDzzyR/ykNn/qS/8AEWzYazkXZ6/kfglet/8AKRah/wAxjf8AE2yJ+iPudLm5BlOm/wDK&#xA;Eaj/AMZv+qWY8vrDWPpKe+VLCCPT4Lxa+rNEFap2AB7fcMqyyN0zgOrHh/vPN82/VkdRzDUF2g+X&#xA;p7u+aeeMixkjNJAQCSGpQe9UOUgM4xSu/ULfXCqKKsrgD2DHJtqhirsVdirsVdirsVdirsVdirsV&#xA;V9P/AN77b/jKn/EhirP54JV0uRCvx1BoN9gwwRcfNE+GUv0aGaO5vC6Mo9Om4I675l5COGLj6WJE&#xA;jfcgLP8A47Fn/rZLJyLkQ5svzDchjnkzTL6xjvRdRGIvL8ANNwtakU7b5OZtsmbZHkGtAeYP+ODq&#xA;X/MLP/ybbAW3B/eR94Yr+VmnWTaGl+0Km8jlljSbuENDTBFz+08suPhv07MvvtMsL9YxeQrMIXEk&#xA;fLsw/h4jGUQebroZJR5FpdI05LOWyjgVLaYsZI1qKlupyMcUQKA2Sc0jISJ3DdnpdhZb20CxuVVG&#xA;cD4iq9KnvkwKFInklLmVPXIZZ9Iu4olLyPGQqjqT7ZOBohs00hHJEnlbFvKOianDq8d9NCY7YwNR&#xA;m2NWNAKde1czM2WJx8PW3Y6/UQlExB3tlmsf8ci+/wCYeX/iBzFxfWPe6zD9cfeHnnkj/lIbP/Ul&#xA;/wCItmw1nIuz1/I/BAaraXU/mPUhDE0hW7JbiCaAu258BkSfRH3OmzDYMw8rWK3/AJZvLRmKCWdh&#xA;yG9CFQj8RmLllUgWuAsMk02yWysYbVWLiJePI7VPU5RI2bbAKDFdO0+a9EkabIXId/5ajrk843DT&#xA;EWynS7JrKwitmYO0YNWHSrMW/jlQDcBTzvUf+Ohdf8ZX/wCJHClD4q7FXYq7FXYq7FXYq7FXYq7F&#xA;URp3/HQtf+Mqf8SGKvTsVcQCCD0PXFUvXRLNLqK4XkGirRa7EnpX5ZYcpIpgIBMMrZuxV2KuIDAg&#xA;ioOxB6EYqo2dlaWUC29pCsEC1KxoKAEmp2GLKczI2TZVsWLsVdirsVdiqyeGOeCSGQVjlUo4G2zC&#xA;hwxNG0xkQbCX6R5c0zTFj9CPnNGGAuH3ejGpy3LmlM7t2bUSyGymKxRK7uqKHkp6jACrUFBU99sq&#xA;toWW9rb20fp28axISWKqKCp3JxJtACrgSgNJ0sWCyj1OZlfl0pQDpk5z4mMY0j8gyeY6j/x0Lr/j&#xA;K/8AxI4qh8VdirsVdirsVdirsVdirsVdiqI07/joWv8AxlT/AIkMVenYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXmOo/wDHQuv+Mr/8SOKofFXYq7FXYq7FXYq7FXYq7FXYqiNO&#xA;/wCOha/8ZU/4kMVenYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXmOo/8dC6/&#xA;4yv/AMSOKofFXYq7FXYq7FXYq7FXYq7FXYqiNO/46Fr/AMZU/wCJDFXp2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV5jqP8Ax0Lr/jK//EjiqHxV2KuxV2KuxV2KuxV2KuxV2Koj&#xA;Tv8AjoWv/GVP+JDFXp2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV5jqP/HQu&#xA;v+Mr/wDEjiqHxV2KuxV2KuxV2KuxV2KuxV2KojTv+Oha/wDGVP8AiQxV6dirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVeY6j/AMdC6/4yv/xI4qh8VdirsVdirsVdirsVdirsVdiq&#xA;I07/AI6Fr/xlT/iQxV6dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVeY6j/x0&#xA;Lr/jK/8AxI4qh8VdirsVdirsVdirsVdirsVdiqI07/joWv8AxlT/AIkMVenYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXmOo/wDHQuv+Mr/8SOKofFXYq7FXYq7FXYq7FXYq7FXY&#xA;qiNO/wCOha/8ZU/4kMVenYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXmOo/8&#xA;dC6/4yv/AMSOKofFXYq7FXYq7FXYq7FXYq7FXYqiNO/46Fr/AMZU/wCJDFXp2KuxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV5jqP8Ax0Lr/jK//EjiqHxV2KuxV2KuxV2KuxV2KuxV&#xA;2KojTv8AjoWv/GVP+JDFXp2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV5jqP&#xA;/HQuv+Mr/wDEjiqHxV2KuxV2KuxV2KuxV2KuxV2KojTv+Oha/wDGVP8AiQxV6dirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVeY6j/AMdC6/4yv/xI4qh8VdirsVdirsVdirsVdirs&#xA;VdiqI07/AI6Fr/xlT/iQxV6dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVeY6&#xA;j/x0Lr/jK/8AxI4qh8VdirsVdirsVdirsVdirsVdiqI07/joWv8AxlT/AIkMVenYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXmOo/wDHQuv+Mr/8SOKofFXYq7FXYq7FXYq7FXYq&#xA;7FXYqiNO/wCOha/8ZU/4kMVenYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXm&#xA;Oo/8dC6/4yv/AMSOKofFXYq7FXYq7FXYq7FXYq7FXYqiNO/46Fr/AMZU/wCJDFXp2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV5jqP8Ax0Lr/jK//EjiqHxV2KuxV2KuxV2KuxV2&#xA;KuxV2KojTv8AjoWv/GVP+JDFXp2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;5jqP/HQuv+Mr/wDEjiqHxV2KuxV2KuxV2KuxV2KuxV2KojTv+Oha/wDGVP8AiQxV6dirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVeY6j/AMdC6/4yv/xI4qh8VdirsVdirsVdirsV&#xA;dirsVdiqI07/AI6Fr/xlT/iQxV6dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VeY6j/x0Lr/jK/8AxI4qh8VdirsVdirsVdirsVdirsVdiqI07/joWv8AxlT/AIkMVenYqgrbU1mu&#xA;7m34Ffq/7XWtNjlssVAHvaYZuKRj3KEevQyXkFssbfvqgsabHticRAtmJ2UbHf2kl1JaJIGniAaR&#xA;PAHIGBAvoomCa6sd81X09pqlnLGxpChkEdSASCa1p4jbMfJKi5eGAlt3qOgeZtS1DXYoJSqwPCax&#xA;qNuSgnkD13yrHmlKdOdqNHCGDiHO0J+YmtX9lqfl+OxumiV7lxcLGRuVMQCv/sZDsfHL5ncNnZWn&#xA;jOGQyF+nb7f1Kv5g+afqtpeaTAJI7l4UcXKNSnKRQV233Su+X4/qAadBpOKpnlfJVXzZd6f5Z0S6&#xA;lT61PdhRM7mhIXqdv2j45VnnwlqlphLJIDYBmGScB2KsTu9ckutd09bd3jhWUI6VoGq1CTTxU5GE&#xA;xIOxGn4IG+dMsyTrmDaP+YjSard2eoRUX6yIrUxD7KEsp5VO+6j7zm1ydnegSiem7u8vZP7sSgf4&#xA;bNswvdRtbSxe9kblBGASU+KtSFFPpOa2MDI11dLRukp8w+aDpttYXNvEJ471gasSv7sgHb3PLJRx&#xA;2SD0YTlSf5UydirsVdirzHUf+Ohdf8ZX/wCJHFUPirsVdirsVdirsVdirsVdirsVRGnf8dC1/wCM&#xA;qf8AEhir01XVl5KQR4jFWM+tJFqV6UNCzlT8iTmXk+mLq+MxyGu9L5ZHjuonQ8XUMVYdQaHLast+&#xA;SRESQifLEjyeYLl3PJ2gNWPU/EmQ1AqA97VpCTMk936lnnf/AHth/wCMD/xzV5neabmPekGhapa6&#xA;Zqsd5dEiGOJgeIqSWqAAMxsP1u7zYjkw8I52xK7mM3mWCTmXV73mCa78pRvvl3V3PDWCv6H6GT/m&#xA;Z/x27j/mHi/4mMzMX1h0XZ390PeUTq//ACiHlr5H+GUavm40P76bNb3UbqLzBaWiMPQkSrrTqWLD&#xA;r7ccoyZpDNGI5Fw8eGJwykeYTjMxw3mN67JMHQlWUsVYbEEZXpP0vQxAJALJvKfmG1aGDS5C3rxx&#xA;M5lb7NPUNFqT2WmZ2XAa4ujg6/THiMxyv9DzKpGsXpHX6w3/ABNs6KP93/m/oekj/dD+r+hlFlrc&#xA;C+VptJZWM0h9RH/ZAEqnj+BOanJj/eiX45POa7H6+JG+b/8Ajg+X/wDUT/k2mYY+uXvdRlTzVtRu&#xA;YPNlhCJjHbGLlIlaKeRfkW+hRhxwBxE1u2gbMkVgwDKag7gjoRmIxQ9nf214rmBuQjbi1RT/ADrk&#xA;pRI5oBtIoLy6Pni5tzKxgEQAir8P2Fbp82OV9WN7sW1H/joXX/GV/wDiRyTND4q7FXYq7FXYq7FX&#xA;Yq7FXYq7FVfT/wDe+2/4yp/xIYlBZ45I0iUg03H4sMEHHzf3ZSKEkzTE7kkVP35mZPpi66PNDXP9&#xA;+n+q36jlo5uZl+konyp/x3bj/jAf+JJkdT9PxatH9Z9yzzpJG95FwYNxidW4kGjCtQad81WZ3um5&#xA;j3sJ1D+6/wBiP+JZjYvr+D0mL6R70kX/AI7Vj/zEr/ycXLurs8n90f6v6GXfmZ/x27j/AJh4v+Jj&#xA;MzF9Yef7O/uh7yidX/5RDy18j/DKNXzcaH99Nlmp/wDKVWH/ABjX/iT5h5v8Yj7v1uPh/uJe/wDU&#xA;jvMGrSaXZJcRxiRmlWMqxIFCCT0/1c2Li4MXHKmBX5q9f9bIaT9LvIfUEnuiQXoaVjFf+DGdJpOQ&#xA;c/F9f47krsyTdzEmpMgJJ/1jmdL6fg5MvoPuTW36f7D/AI2zVz+t5/W9XXN/eTyLDNM0kULxiJGN&#xA;QoChfhHbZRlGWIG4dJnHJlfnr/jtw/8AMMP+JSZVp/7s+/8AUmX0FlPln/jhWf8Aqf8AGxzDyfUW&#xA;MOSE8p/Yu/8AXH8cszdGONJb++ex85XtwihnWNAA3TeOMdsxSd1JopPevzvJ3pTlI5p82JybYo4q&#xA;7FXYq7FXYq7FXYq7FXYq7FVfT/8Ae+2/4yp/xIYlBZvLcQjTpICw9VqMF9uQxhE1bjZj+7ISeD++&#xA;l+Y/jmXk+mLro80Nc/36f6rfqOWjm5uX6Slr6hd2N1JLayenI1FLAA7VDU391yWSII3cfTGpfBA2&#xA;5JSUnuZD/wALmp1XP4PSYuY94S/UP7r/AGI/4lmHi+v4PQYvpHvY9dyPHfQSIaOkvJT4EMCMu6u1&#xA;kLx/5v6EfPe3d5ZetdStPL6dDI55MQJdqk5l4frDqowEdgK3/QybUNQsp/LOhWsMyvcWoAuIx1Tk&#xA;AVrlGsO7q4xIyzPem+m65Le6pb3t+yr6JIZwKAIKt09uVM1WPMZ5YmSZ4BHGYx6rvM3ma31B30+C&#xA;OscLpKk9dm+Eg7dvtimbwb7uPpsBjuUrvvtD5NlWk/S58PqCT3fV/wDUH/ExnTaPkHPxfX+O5K7H&#xA;/eqX/XH6zmbL6fg5UvpPuTW36f7D/jbNXP63ntb1Q7f71N/rx/qyrM6TP0Ti81C7vrhZbqT1JFQq&#xA;GIA2qzU292yEIgQNMQbgWW2t5F/h2zgjlpPGVLoCQQDyIzX5gbtjeztD1KGxtbt5Ks5NUXxKg98n&#xA;nPJEDTHry9N7rNzcleBkjSq9d1VFP6sxSVJtD3H9/J/rt+vLA3BZirsVdirsVdirsVdirsVdirsV&#xA;V9P/AN77b/jKn/EhiUFlFz/fD5f1y6H924ef6ShoP76X5j+OW5Ppi4MeaGuf79P9Vv1HLRzc3L9J&#xA;STUf71vmP1ZZPk42n+r4KNt/dyfOT/iOafVc/g9Li5j3hAah/df7Ef8AEsw8X1/B6DF9I97HL/8A&#xA;3qi/4yH9Yy7q7U/3fwRSf8cz/Yf8zcysH1B1h/T+hW077f0xfqOUa39bgy+osktP95ZP9l/xHNJg&#xA;+sMpckJH/va/+oP1LnQYvpDUmd99ofJsjpP0s4fUEnu+r/6g/wCJjOm0fIOfi+v8dyV2P+9Uv+uP&#xA;1nM2X0/BypfSfcmtv0/2H/G2auf1vPa3qh2/3qb/AF4/1ZVmdJn6Jgv2/oP6jgH0FjH+7Kfad/dj&#xA;/UX9WYOo+n4tQXr/ALzTfNv1DK9RzChKYv8Ae2b/AFB+tcx0t3H9/J/rt+vLQ3hZirsVdirsVdir&#xA;sVdirsVdirsVbVmVgykqymoI2IIxVAvbas7ljqlyKnb97Jt/w2GzyYmIPRpbHUASf0pdVPUiRx/x&#xA;tiZFHhR7g39QuSatqN2SO/rN0+84eM96TEHotOlBql7u6cnuZmx45d6BjiOQC5dLiXpNcU7j1nFa&#xA;/I5Ei+baJEdXHSbQ7OZXHg00v/NWREAOjYNRkH8UvmVv6D0smphLHqCzuf1th4Qy/OZv58vmVw0j&#xA;TwvERHj/AC83p1r0r44Rsx/MZP50vmV66ZZL9mPj06Mw6dO+CQB5sfGn3n5qotowCAXAPUCR6fry&#xA;AwwHQfJPjT/nH5rfqcAbkA3I7E83r+vLAjxZ95+a9oEb7TSH5yOf44gVyXxp95+ak2nWrElg5r1/&#xA;eSf81ZYM0xyJ+bIanIP4pfMqf6H08GoRlPUlZJB+psl+YyfzpfMp/NZf58vmXfom0/ZMq/KaX/mr&#xA;IeLLvLXLLI8yVp0W0LFucwJ3r6r9R8zickj1LA782jo0fa5uQfESnHxJd5Wui4abOv8Ad6hdr2/v&#xA;W6fQRkSSeaKC06de0IGpXIB6j1H/AOasBN81oLE0q7SQOL2UnblVm3A7HfBS0EzJJJJNSepwpdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdir//2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmp:MetadataDate>2017-08-31T12:14:19+02:00</xmp:MetadataDate>
         <xmp:ModifyDate>2017-08-31T12:14:19+02:00</xmp:ModifyDate>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>1000.000000</stDim:w>
            <stDim:h>1000.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:DocumentID>xmp.did:3E639506358EE7119CD2C3DB3249FDFC</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:3E639506358EE7119CD2C3DB3249FDFC</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>xmp.did:3E639506358EE7119CD2C3DB3249FDFC</xmpMM:OriginalDocumentID>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:3E639506358EE7119CD2C3DB3249FDFC</stEvt:instanceID>
                  <stEvt:when>2017-08-31T12:14:19+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -1000 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 1000 li
1000 1000 li
1000 0 li
cp
clp
0 0 mo
1000 0 li
1000 1000 li
0 1000 li
0 0 li
false sop
/0 
[/DeviceRGB] /CSA add_res
.745098 .745098 .745098 rgb
f
gsave
190.04 941 mo
500 941 li
500 955.256 li
190.04 955.256 li
190.04 941 li
clp
190.04 955.256 mo
190.04 941 li
500 941 li
500 942.782 li
396.68 942.782 293.36 946.94 190.04 955.256 cv
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 1000 ]ct
[311.52 0 0 15.84 189.12 43.8401 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 649 
/H 33 
/M[649 0 0 -33 0 33 ]
/BC 8 
/D[0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 649 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 649 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 649 string /rs cvx /pop cvx] cvx
]
/O 2
>>
%%BeginBinary: 1
img
lZBd\h/`O9]5cSEn8Io:]5HA?r+pt$Jo($plZBd\lZ2N9]5cSErbpn:]5H\Hphbq*Jo'OblZBd\q/YM9
]5ctPp2K#0]5I1Vl>;r*Jo'%Ti-""#m;pTpgN)"fj)NgmiG[jrf5B>[dVOMOa_]mXiH4s<_/n@Ok],-m
gMl+ioPVcggMPkbJo&&8i-":+q/j5igN*"-a)TjQibng8]PcJ@mVIJkX_c^7gNDIsmrQcqgN)%giGmUk
ic"!teSa,Ye80_Qo5*-(gNDIsrH#bqgN)OudrF,]ic"L-a)9XKibX3_j_WXogNDh(pN4&hgN*%.`GsXO
jDY':]5HA?n8*\mf51)']QX9shK@e!`H1cpgN'rHpMf55iGZGJs)-S.WbfdnoQS?!p3,25iH3Oil#YU"
^iB<mgMl+ib\lrggMOH:]57+`eTU/"gNDIsiH*apgN(SZmr@*$iG[Ffj)3Ug`b_bnk]l*2]640sgi_Rt
a)grqgN'oGq/GA5ibuSLrGLA,XDIKEk]l*2aEI3!gNDIseT9qqgN(,Mqf1A0ic!(Zmr$ls\npJEk]l*2
eop2!gNDIsj)`pqgN(V[m;^m"ic!RhiGRCeaDBIEj*BC(n9=GI]QW%Pr,h(C]6!"Qq/X,fgMlh(m;KXT
gMP&Kj*BC(rcdFI]QW@YpiYP;]6!L_lZ0XXh/NC5iGZAHl#$$/a_^!_k'6TEiHMqXnoa5?iH2\Qs)Qq9
]Q*7VnSmH*]PdI\j_`+UrHc)$gN`:5nTVTggNEL;j`J+UjDt$9]5cSEpM]D:]5HGAs)%FFrHc)$gNW^B
j*/+Yk&pB?icMeRnoF#9]5c_IrG^b7]5HqOnSRr8rHc)$k]l`Eici"XoQBA?icMeR!-6k8]5d4Wmr79)
]5IF]j)+I*pNtY@gj.k(gN_\$k]YL"gNDIsoQ/)pgN)7mgi;(fiG\+$cu/\spNtY@l?Uj(gN_\$p3+K"
gNDLt!-GhogN)b&c>hTXiG\U2_J]3epNtY@pj'i(gN_e'rcc"ugNE"-noVKbgN*74^iA+Jl#6B9]PdR_
l[7]=gNq\$hg*t$icjX1drsJgicOj7a)g!Uic3[lgMl.jmV_W6l[7]=gNr12d<XJkick-?`HL!YjE1ED
]5u_In8ZZlgMl.jr,1V6l[7]=gNr[@_g1!]k'-cJ]6;qOnoXDD]5u_Irc,YlgMlIspi#).^jPNrom>G>
]Qs<tj*9O,^io["gNDIsb]E8pgiC#Hrc$_5lu0[eqg7LQgNp_^qg$q@iHNRjmrmH.iH3dpicEmq`c:]l
gMlLtaF*f2iHs=*d!>#(gN_\$gihY"gNDIsk]>6pgiCnak],?rlu)lQgO6_^mX+SQgNpJWqfq(Eici4^
qf^_:icNFdmrR6(]5[gio5F\YgO6_^r-RRQgNpb_q0C_>ici^lm<76,icNpriH*aoaDpilno+SXgO7%g
pjD%IgNq7mlZq60icj4%hfdasicOF+drX8aeoBhlno4JUgO@n*rd;G-iHs[4pNjJtgN`I:lZ^!bh0&a?
iH2_Rl#QB9f5^\;gOA:5p3jQ#iHt0Bl$C!fhg#*EiHMqXlZM`?iH2_RpN#A9f5^\;gOAdCk^C'jiHs=*
]Qrmhms*f8]QX*nj)s=&^iTHqgN(ncc[X\ugO0'L]mSdck'H`I]6W.Uq02+J]6<(SrH7+A]6!:Yo5`0,
gOA@7oR4B"iHt3Ck^'jdiHY6Eici"Xm<.l?icMeRq/YS;c[X\up3l(O]R8^c!.3IH]6Wjim<IW7]6='o
iH=.%_/oKph/_b1`..T4gO@n*epQV-iHs=*j*B@(gN_\$mrm!"gNDIsqfBl#l%%33l[RZ<gO8.1fR2Y)
gNrC8b^%rfiHP6D^inITl#c`C_fP'mi.'R4gO@n*npJT-iHs=*s*;>(gN`%.pNO8ngNE74lZC$cjFQ'9
`IIW3gO@n*fR2e.iHs=*jE]C'gN__%n93$!gNDLtr,_INjFQ'9dspV3gO@n*k'Yd.iHs=*np/B'gN__%
rcZ#!gNDh(piPqFjFQ'9iIBU3gO@n*oR+c.iHs=*!-u5&gN`+0p34,lgNE=6l?)H8hLaL5oml4U]RSmh
qgR:J]6s6tmX*`8]6OC$gj%e%a*.0"gNE@7hLaR7s+/pT]RTC!m=*f<]R0^,iHs@+aEdE'gN_\$eTU/"
gNE@7hLb'EnU]GF]RTm/hgX=.b'`c-iHs@+ep6D'gN_\$j*'."gNE@7pk-52gO]'Kk(('nj*pfQgO6_^
om?(QgNpMX!.!=DiciIeoQC4Wpk-52hLYZWgOQncnUBeQgO6e`s*WdPgNq"fnp/u7icissk&p`Ipk-52
m"+YWgOQncs*idQgO7:nnU0;BgNqLtjE]L)icjI,fQI7;o7YkNi.Ba9gO\+0o7+o4gOA%.rI);*iHsp;
nTqfmgN`^AjEKa0o7YkNmXi`9gO\+0]RS[bm="GO]6rRaqKh1J]6WO`p3>P?k'$?LgOoEU^k1<ll%&AU
]RS[bqgIFO]6rghqKq"D]6X$nk]l'1k'$-GgP"=6ie#p:gO\+0oRFr3gOA+0qgH,)iHss<ms;Tkgj&jC
o69SUgP"=6n:Jo:gO\.1!._\2gOAU>m<uWpiHtHJiHi+]k]lcFnTXASgP"=6rdqn:gO\X?npn?%gOB*L
hgN.bl$N5QgNpJWp3>bFnTVj(l\+e]gOm+irdipWgORIsnpfDCgO7n*hgFF1gNr+0ds:\4_M.f=j+Q0>
`e*o9gO\+0fmi(4gO@n*l[7*-id9F+pNa`'pNXc5qh<dXgOn"-k^qQ?gOSI:eplG'gO8mF_gLHjhg56I
]6X-qieFjpm=aq]gOm.js+0!WgORLtn:02AgO7t,hL+:/gNr12o6K>M[>"L2iIos<aFa):gO\+0g4/+3
gO@n*m<m9.iHs=*q0D(IieG.#q1[RVgOn(/kCVH>gOSL;e:65%gO8sH_L1<hiHkBIh0JpSgP=dCp4^;9
gP"gDo7OZ,gO]9Qi./Iik^N/QgO6\]qg7ORid1NYgP=mFre@h7gP#<Rjb(0sjFR)WgOQqdp3u.QgO6te
q0_1Kid1NYgP>BTn:n?)hh:r]gOm+inq$(WgOR%grdW[OgO7Isl[7]=id0".gP=aBpk?G9gP"mFnUnK+
gO]<Rhgi=gl@/;QgO6_^r-S$^d>6P4k(`eg[>!@gq1I^[]Ro6rpOV(L]79U)jF5j3`I.H.mX*?;gP>EU
mY8-'iIq)]gOm.jo7?.WgOR(hr.!IMgO7Oul?r#HnVOo7qM<m]ieGa4k_7cEgOn[@eUlP,gOT-M_ggEi
k'crOe9peCb)#D?gP=dCgkFI9gP"=6on(59gO\@7qLH5.gOAdCk^Cs.nVPnShMBpAieH`Pb_=f)h1P`[
]7Sdgn:9kU]RS^c!.N[Ne9pV?gPNV"q2!d\iJ,^5k(VQCgOnaBe:QG+gOT0N_113gk^E)O!.=-jgPO+0
l\O;NiJ-3CfS/(5gOo6P`e)rrj+-rU]78Rap3l(O!.=-jgPOU>h2'g@iJ-]Qb(\T'hh1l[]RnmhnUTqU
]78[drdNUM!.<^_iJR#ZmtnH.i.q5cieFjpnq?:]gOm7mrIWdTgOR_%l[Rf@i/?QOqha9g[>=7+mYBeV
[=nU6gk=F7c%>D9gO\+0i.'R4hgXLAl&,:ogPN=or.j3cieG=(oS)%QgOn74iI]g8gOS^Ac[Xi$!0"=D
iem/\mYS?-iJ7;ciJ+aooRuF]gOm=or.<[SgORb&o7$b![>X%%r/'?g[>=:,m>'YT[Y4^8gP"=6c[tS:
gO\+0iIBs=!0"=Dl\bIpgPN=orJ09ciJ,:)nqGhOgOn=6i.B^7gOSaBf73[WgPjdChM^?MgPP6PbD=o.
ieIDc\V8dkn:U([]7Sjis+/pTnULFqgPk9Qd#6k?gPP`^]nkEum"Y7h[>!@gre''[]7T@"nU]GFnULFq
gPkc__MdB1iJIGg[><RmqM+6h[>!arp4V1Q]7Tj0j+5s8nUL4lgPssHg5FaEielKIm"if?gP=aBs+Rq9
gP#-Ml@Za$hLYZWp42grgPssHk_m`EielKIqM;e?gP>0NonKl.gOoQZgk37km"+YWp42grgPssHp5?_E
iel`PqMDV9gP>Z\kD$Buk_/S]gOm.jqLRXWp41;Gj,NkogPiOur/0WogPNh(o8).VieH!;iJ$$>gOnpG
c@YtFb)Z"Ol]'YX^5McEiJQBHd>6n?gP=dCj+Ys9gP"=6r.;_9r.3"Ns,GiogPj@7lAOVYgPOgDf8/1:
ieHuW`J*'"jFd5[]7Ts3SrVolpPmpd[>Y$AjbhfL`/*u?gP=aBf7i+9gP"=6n:L7`SrWE%l&FGV^l.oE
ielKIdYQt?gP=aBjb;*9gP"=6rds6`SrVQbgPjF9k_nGXgPOjEeqi(9iJ-rX_hHiuk(EA[ie"7laH##7
iJdYm[>X"$oSMdg[>="$onVO][>"F0j+QTJ\rO@^gPtZ\m>SH2ied_ngPN=oonV^cieG(!qh<dXkC^j9
XH)%prJ]Wm[>XO3nqu1Y[tt'?gP=dCabB,9gP"aBJr[j2gPt6Pq2D_>iemDckD?U&k_JeciJ+aoqh4Qo
OH-i2gPt`^l\r60jGNtpgPN=op4qdciJ,%"q1\3hSrTh2gPu5lh2Jb"nquspgPNFrreT<aiJ,O0l\4_Z
J,~>

%%EndBinary
grestore
np
grestore
gsave
500 941 mo
809.96 941 li
809.96 955.256 li
500 955.256 li
500 941 li
clp
809.96 955.256 mo
706.64 946.94 603.32 942.782 500 942.782 cv
500 941 li
809.96 941 li
809.96 955.256 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 1000 ]ct
[311.52 0 0 15.84 499.2 43.8401 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 649 
/H 33 
/M[649 0 0 -33 0 33 ]
/BC 8 
/D[0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 649 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 649 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 649 string /rs cvx /pop cvx] cvx
]
/O 2
>>
%%BeginBinary: 1
img
Jo$$Tn8-ir]5IXej)<[k`c:`mgN'oIpiQ+LODKMbib[@da):QfiG[Iie8a_mgN()Nr,_.FSns!pe83lV
eSaPfiG[Iiic3^mgN(S\mW7Z8XDEK)nSHrs]5IUdj_rmm`,YQlgN'oIpN5bDhK?DGJo'I`gMOrJp28l.
gMkS\l>bR!^N9?picO%"aD?HEeSNuWe8FJfic!Rji,ROlgN(P[mrRK1hK=EdaDBUJiGRCfiG[IimW$Qm
gN)"hicF(#gND\&o6-43\np,<mr$BfiG[Iir,KPmgN)M!e8sSjgNE14j`[53XDHX.rGKAfiG[drpi*lc
gN*"/`cL*\h0&a?fljH5a_]^Ki,7=fic!RjluCBlgN(tgj)a4%gNDV$f66b0\nnupgMQ@rc>MW[gMm"/
_K"=NkB#0picNpto6/6!o688lX_ca/r,0;fic!gqqJa&dgN)t.a)g6^gNC,Oo66jDj)+U/]5HSGn8R`5
]Q)_Is)PbniH4=,o6%Zgick'?o6?pEnSRT/]5HSGrc$_5]Q*4WnT)9`iH4g:j`S1YjELWJkBNY9s)$S/
]5HtRp2A])]Q*^ej)VeRj`LHCgNC,OnosVJkBP0dibeO/]5HVHmVqT5]5cSG]5utRkB6H?]6<.WoQ]SE
id&^`n87N/]5HVHr,CS5]5d(Uo5_HaicOj9kB4C[icbBHgN__'bA@/phJKlBlYlQ:gMjcEpN#A9]6!%T
s)d"<]6<[fnori5id(97gMOQ?pi#G9gMjoIrGgS4]Q<UbnT<N.]6=0tj`fI(`-M-'r-J*RgMO`Dr,1J3
gMkDWmr@*&]Q=*pj)j$u`ch'!icj.%dWt,'r-J*RgMP5RmV_!%gMkneiGmUmaE.#qiH3gse9:&!icj.%
i-F+'r-J9X]5I@]lu1Wt]lF'lgN'oIn9"8DgNC,Or-.:IgN^V]qK^e@pNugT^Ma!fic!RjbAm&lgN'oI
rcI7DgNCGXpibV?gN_+km!7<2pNugTc#2ufic!Rjfl?%lgN(;Tp2f58gNCqfl?;-1gN_V$hKdh$pNtn;
iG[IikAf$lgN(ebl#Yg*gNDFtgih\$gN`(1d!=AliHtBJo6fP8iG[Iiol8#lgN):pgN2=qgNDq-c?A2k
gN`R?_Kjm^kBm)Ql[7]0iG[Oks)>SigN)e)c#_icgNEF;^in^]ict<E]6W.Wom?(Ql[8,=gMl7of5]Pc
dW=\picNpthKIb!iHO%$lZpm'gNqk+pO()1mVgj!o5VllgN)4ngiMIsgNDk+d!"AlgN`O>_g1!_k'R&R
^O5HfgMjcEgN)_'c?%uegNE@9_KOm^iHY6E]6W.WoR$%R^O5Wl]5cSGr,]\qiH4(%qK9Dnicjg8mWc?h
gNqh*]R8mjomQjho5M<]jDt$9]Q<%Rn9+)?]6<1Xr-7.E]6WXeo6TAB]R9C#kC*AZo5M<]noF#9]Q<%R
rcR(?]6<LapikJ;]6X-sja,m4^3os.gO9*Nfl>beqK'MpicO+$r,oVpiHO[6ms)HigNijHj*SCck'crO
gOB!Kfl?"lqJs2hicOU2mWH-biHP0DiHVt[k^)lIid8:boR5qOgOB!Kfl?M%luK^ZicP*@i,uYTl$)rI
gN^>Up3PkIid8=c!.<OLgOB!KhK$8Ml?)fCgNC,OpNPtJgN^DWs*<@FiHr^po6f;@gO@q-o7,V;]Q<ji
l?(d'^NTR!icj.%bB`W'gNqh*fR2e.gO7h*l@7oFhK$GRr,^h=gNCbamrm]7gN_Csj*BC*iHs^7f6l>$
gOApIf71_[l#c`CgNC/PoloeIgN^AV!.!=Fid8aooR,DAgO@n,iIC*B`,kZplZCm(^39O"iHO%$b'EQ'
gNqk+epQV-gO7h*l$q03l%$irrH$q>gNC_`nTNl8gN_@rjE]L+id9a6fR2G%gOAmH`II-&n8mQ1gND1m
j*'F+gN_h*f6Q+siHt-CbC&&mhL>EP]RS[dnU^:_n8mQ1gND\&eTTqrgN`=8aa)WeiHkQP]mSR_m!eDP
]RS[ds+09_n8mQ1gNE14a*-HdgN^>UgNr:7oR"5ugO8pIiI8FhkCE5Uj+7)LgND.lj`]U,gN_e)fQl4t
id:0Bb^A/nh1#BQ]78Rcn:BqWhLbWHgNDY%f66+sgN`:7b'D`fid:ZP^3n[`l[JAQ]78RcrdipWhLbWH
gNE.3a`cWegNW^D]Qr7Xm<ePR]6r@]q0q@Q]78snp41nKhL`@_icjR1om")ogNr^Ck^0phiI1TOgO?eb
o76(UgO[.lr.=]r]6<1Xom#YE]6WC^qKh+I]6s'qm=!`<]RS[dgO[Y%mXk4d]6<7Zs**4B]6Wmlm!@W;
]6sR*hgO7.b('#4gOS%0gk+I9pk.aQiHOF/p3=2pgNr[Bl?g-jhgPHOgO?banpp"UgO[+krdrmWnq?1L
iHOp=k]j^biHkBIid8:bm="GOgO?ba!.`jTgO[V$n:KDInq?1LicbBHgN^>Ums=AIid8:bqgIFOgO@4n
oRGVGgO\+2ie#p;nq?UYgN^>Ur-I:IiHrIiq0^qFgO@_'kC;6:gO\R?e:QG-gP#HXo7cd[gN^Y^pj(V?
iHrt"l[7H8gOA45fmhb,gO]'M`e)rtj+R5]m=k.UgN_.ll?V-1iHsI0h0dt*gOA^CbCA8shLYZW]7Sdi
nV$4]m=k=[]6X:"iHjL1_0l--gO7h*e:6\3gOS%0kCV9:g4S.5qM!%Fpis]%q0C_@id9"!m<mZ:gOA.3
g4.k-gO]$LaF`,uie7/]_M.c0d<Y&'gNqk+h0e+-gO7h*n:/Z3gOS+2s+.h7g4SmJm"E60hKdk%iHsm<
d<s\sgOB-O^OP!gl@JMW]7SdirIj'][>"+)o7l+IgNqh*q0^)-gO845p3sZ(gOT'MjFOppjb*;[gOutg
reBNhhKdk%kBm)Q]6r@]oR?"Q]RSjir.*OQ]7TX,l%@`D^kMK9ieHK>id9p;dsTnugOB'M^jk*hl%/GW
]7Sdir.O!][>"((oS2+Ur.sBZid:EI`I-EgjF6lQ]78RcpOVFW]7T*rpk.=S[>"R6k(_WGr.sBZk'R&R
]6r@]np]kQ]78^grIEXR]7TU+l@[iE^P2E9ieH3Cr.sfg]6r@]!.N^P]RT9un:98E]7U'8h1OI8b_>>9
iJ-*Bhh^l[msDZok^E)OgO?ebqLIRUgO[Cson(qNgP":7gkF^AgP>0PjbWAP]6s=#k'c!5_ghN4gOS%0
eUlt9gOn76k_7<9iJ-*BqhWj[eU6,"rdN^Q]79-snUTAF]7U$7hLjR9bD#89ieH3Ch2'a?nVPeDk'crO
gO?baq1.LUgO[@rp4D%OgP"76h1ajCgP>*NbD>\FeU7";k^D37_12?3gOS%0e:Qn9gOn76kCq69ieH3C
q1u_?nVI6ngO7h*c[YA4gOS%0iI]g9gOn76oS(/9iJ-<HqhMS8gPPcao83NqgO7h*h1+@4gOS%0mt/f9
gOn:7!/.b6iJ-fVm>&**iedMgm"tdjgO7h*l[R?4gOS%0rIVe9gOndEnq=E)iJ.;dhhSUqn;6Lgm#'_M
c%#23gOS%0i.Ba9gOn76o7b)9ieH?GrJ.e:gPP]_lAFMXi-sF1iIBU4gO\dEc@Xf'gOutgieHiUmt\<,
i/.AgiJQQOi-sp?dsp,&gO]9S^k1<nl%JY][>!UpqhO-c[>=7-mYTn[i/>U)gOS=8q16/0gOo3Qk(L-r
l%]"ggP<1mr/'?giJPO2o8CV<gOSgFl[c["hLkf[gOutgpP/!ggP<M!pk[[]iJQ$@jbq-.gOT<Th1<1i
m"=e[gP!+krIs3bgP="/lA42OiJQNNf8K0KgOS:7qLQ81gOo0PkCg6sk_AthgP<1mqMF3giJPI0oo%R`
qi1,qgOSdEm")d#h1P`[gOutgp4hshgP<FtqM<m_iJPs>kDS)Rqi1,qgOT9ShLW:jl\"_[gP!(jre9?d
gP<q-m"jDQiJQHLfo+UDqi1?#gOZtgpk.X[gP!P"nV,qVgP=F;hMBpCiJQrZbDY,6hMqMop5\ltgO[.l
r.<[UgP"%0j+ZHHgP=pId"pG5iJRGh]o1X(m#CLop5\ltgO[Y%mXj2GgP"O>eV2t:gP>EW_MHs'kDK.o
[>WduqMjKop5]'%]7Td0jb)<@`.dc9ieH3Ceqi7?gPOmHl&3fEgPjpI!0,-]r.2V7rIWdVgP""/jFuTJ
gP=jGdYQY7iJRAf^Pgj*lAb@ob)ZCNc%>D9gOn76i.]a9ieH3Cnqb5?gPP$LrJJ"@gPkoejGh<Bie#p;
gP"sJabA].gP5cb[YW[po8<!o[>Wt%r/BBiXcE"5ie#p;gP#HX]7o3uk_Jec[><RoiJP%$mYpRmgPrh*
jc8>PgOnO>q1Q/0iJ.&]k(g@#l&#"giJP%$r/BQmgPs=8f8f$HgP"pIb(\i0gP>ca\;8mrnVZjo[>Wn#
rf#TkX,b;^kC_NBqLuS9ieHTNp4p&3gPPrfj,17&m#:FmgPrb(]8l',ie7/][>!UpoS;Xc[>="&onhXb
[>Xm?if)WOa,[9^m=_m$ie@GfgP<1monhjgiJP:+qMX*egPsaDJr]G_m=_m$n:pLggP<7os+oEdiJPd9
m#0VWgPt6RJr\rQm=_m$reBKggP<b(nVGqViJQ9GhM^-IgPt``Jr\HCJ,~>

%%EndBinary
grestore
np
grestore
185 50 mo
815 50 li
815 941 li
185 941 li
185 50 li
cp
1 1 1 rgb
f
185.643 941 mo
185.643 843.881 li
185.643 840.686 188.233 838.096 191.429 838.096 cv
194.624 838.096 197.214 840.686 197.214 843.881 cv
197.214 941 li
185.643 941 li
cp
.882353 .937255 .886275 rgb
f
185.643 941 mo
185.693 941 li
185.693 843.881 li
185.693 842.297 186.335 840.863 187.373 839.825 cv
188.411 838.787 189.845 838.146 191.429 838.146 cv
193.013 838.146 194.446 838.787 195.484 839.825 cv
196.522 840.863 197.164 842.297 197.164 843.881 cv
197.164 940.95 li
185.643 940.95 li
185.643 941 li
185.693 941 li
185.643 941 li
185.643 941.05 li
197.264 941.05 li
197.264 843.881 li
197.264 840.658 194.652 838.046 191.429 838.046 cv
188.206 838.046 185.593 840.658 185.593 843.881 cv
185.593 941.05 li
185.643 941.05 li
185.643 941 li
cp
f
185.643 50 mo
185.643 174.74 li
185.643 177.936 188.233 180.526 191.429 180.526 cv
194.624 180.526 197.214 177.936 197.214 174.74 cv
197.214 50 li
185.643 50 li
cp
f
185.643 50 mo
185.593 50 li
185.593 174.74 li
185.593 177.963 188.206 180.576 191.429 180.576 cv
194.652 180.576 197.264 177.963 197.264 174.74 cv
197.264 49.95 li
185.593 49.95 li
185.593 50 li
185.643 50 li
185.643 50.05 li
197.164 50.05 li
197.164 174.74 li
197.164 176.324 196.522 177.758 195.484 178.796 cv
194.446 179.834 193.013 180.476 191.429 180.476 cv
189.845 180.476 188.411 179.834 187.373 178.796 cv
186.335 177.758 185.693 176.324 185.693 174.74 cv
185.693 50 li
185.643 50 li
185.643 50.05 li
185.643 50 li
cp
f
198.5 941 mo
198.5 903.578 li
198.5 900.383 201.09 897.792 204.286 897.792 cv
207.481 897.792 210.071 900.383 210.071 903.578 cv
210.071 941 li
198.5 941 li
cp
.811765 .866667 .956863 rgb
f
198.5 941 mo
198.55 941 li
198.55 903.578 li
198.55 901.994 199.192 900.56 200.23 899.522 cv
201.268 898.484 202.702 897.842 204.286 897.842 cv
205.87 897.842 207.303 898.484 208.341 899.522 cv
209.379 900.56 210.021 901.994 210.021 903.578 cv
210.021 940.95 li
198.5 940.95 li
198.5 941 li
198.55 941 li
198.5 941 li
198.5 941.05 li
210.121 941.05 li
210.121 903.578 li
210.121 900.355 207.509 897.742 204.286 897.742 cv
201.063 897.742 198.45 900.355 198.45 903.578 cv
198.45 941.05 li
198.5 941.05 li
198.5 941 li
cp
f
198.5 50 mo
198.5 88.313 li
198.5 91.5083 201.09 94.0986 204.286 94.0986 cv
207.481 94.0986 210.071 91.5083 210.071 88.313 cv
210.071 50 li
198.5 50 li
cp
f
198.5 50 mo
198.45 50 li
198.45 88.313 li
198.45 91.5359 201.063 94.1486 204.286 94.1486 cv
207.509 94.1486 210.121 91.5359 210.121 88.313 cv
210.121 49.95 li
198.45 49.95 li
198.45 50 li
198.5 50 li
198.5 50.05 li
210.021 50.05 li
210.021 88.313 li
210.021 89.897 209.379 91.3306 208.341 92.3687 cv
207.303 93.4067 205.87 94.0486 204.286 94.0486 cv
202.702 94.0486 201.268 93.4067 200.23 92.3687 cv
199.192 91.3306 198.55 89.897 198.55 88.313 cv
198.55 50 li
198.5 50 li
198.5 50.05 li
198.5 50 li
cp
f
211.357 941 mo
211.357 849.227 li
211.357 846.031 213.947 843.441 217.143 843.441 cv
220.338 843.441 222.929 846.031 222.929 849.227 cv
222.929 941 li
211.357 941 li
cp
.741176 .937255 .886275 rgb
f
211.357 941 mo
211.407 941 li
211.407 849.227 li
211.407 847.643 212.049 846.209 213.087 845.171 cv
214.125 844.133 215.559 843.491 217.143 843.491 cv
218.727 843.491 220.161 844.133 221.199 845.171 cv
222.237 846.209 222.879 847.643 222.879 849.227 cv
222.879 940.95 li
211.357 940.95 li
211.357 941 li
211.407 941 li
211.357 941 li
211.357 941.05 li
222.979 941.05 li
222.979 849.227 li
222.979 846.004 220.366 843.391 217.143 843.391 cv
213.92 843.391 211.307 846.004 211.307 849.227 cv
211.307 941.05 li
211.357 941.05 li
211.357 941 li
cp
f
211.357 50 mo
211.357 180.086 li
211.357 183.281 213.947 185.872 217.143 185.872 cv
220.338 185.872 222.929 183.281 222.929 180.086 cv
222.929 50 li
211.357 50 li
cp
f
211.357 50 mo
211.307 50 li
211.307 180.086 li
211.307 183.309 213.92 185.922 217.143 185.922 cv
220.366 185.922 222.979 183.309 222.979 180.086 cv
222.979 49.95 li
211.307 49.95 li
211.307 50 li
211.357 50 li
211.357 50.05 li
222.879 50.05 li
222.879 180.086 li
222.879 181.67 222.237 183.104 221.199 184.142 cv
220.161 185.18 218.727 185.822 217.143 185.822 cv
215.559 185.822 214.125 185.18 213.087 184.142 cv
212.049 183.104 211.407 181.67 211.407 180.086 cv
211.407 50 li
211.357 50 li
211.357 50.05 li
211.357 50 li
cp
f
224.214 941 mo
224.214 802.004 li
224.214 798.809 226.805 796.219 230 796.219 cv
233.195 796.219 235.786 798.809 235.786 802.004 cv
235.786 941 li
224.214 941 li
cp
.670588 .866667 .956863 rgb
f
224.214 941 mo
224.264 941 li
224.264 802.004 li
224.264 800.42 224.906 798.986 225.944 797.948 cv
226.982 796.911 228.416 796.269 230 796.269 cv
231.584 796.269 233.018 796.911 234.056 797.948 cv
235.094 798.986 235.736 800.42 235.736 802.004 cv
235.736 940.95 li
224.214 940.95 li
224.214 941 li
224.264 941 li
224.214 941 li
224.214 941.05 li
235.836 941.05 li
235.836 802.004 li
235.836 798.781 233.223 796.169 230 796.169 cv
226.777 796.169 224.164 798.781 224.164 802.004 cv
224.164 941.05 li
224.214 941.05 li
224.214 941 li
cp
f
224.214 50 mo
224.214 180.977 li
224.214 184.172 226.805 186.763 230 186.763 cv
233.195 186.763 235.786 184.172 235.786 180.977 cv
235.786 50 li
224.214 50 li
cp
f
224.214 50 mo
224.164 50 li
224.164 180.977 li
224.164 184.2 226.777 186.813 230 186.813 cv
233.223 186.813 235.836 184.2 235.836 180.977 cv
235.836 49.95 li
224.164 49.95 li
224.164 50 li
224.214 50 li
224.214 50.05 li
235.736 50.05 li
235.736 180.977 li
235.736 182.561 235.094 183.995 234.056 185.033 cv
233.018 186.071 231.584 186.713 230 186.713 cv
228.416 186.713 226.982 186.071 225.944 185.033 cv
224.906 183.995 224.264 182.561 224.264 180.977 cv
224.264 50 li
224.214 50 li
224.214 50.05 li
224.214 50 li
cp
f
237.071 941 mo
237.071 825.17 li
237.071 821.975 239.662 819.385 242.857 819.385 cv
246.053 819.385 248.643 821.975 248.643 825.17 cv
248.643 941 li
237.071 941 li
cp
.741176 .937255 .886275 rgb
f
237.071 941 mo
237.121 941 li
237.121 825.17 li
237.121 823.586 237.763 822.152 238.801 821.114 cv
239.839 820.077 241.273 819.435 242.857 819.435 cv
244.441 819.435 245.875 820.077 246.913 821.114 cv
247.951 822.152 248.593 823.586 248.593 825.17 cv
248.593 940.95 li
237.071 940.95 li
237.071 941 li
237.121 941 li
237.071 941 li
237.071 941.05 li
248.693 941.05 li
248.693 825.17 li
248.693 821.947 246.08 819.335 242.857 819.335 cv
239.634 819.335 237.021 821.947 237.021 825.17 cv
237.021 941.05 li
237.071 941.05 li
237.071 941 li
cp
f
237.071 50 mo
237.071 117.716 li
237.071 120.911 239.662 123.502 242.857 123.502 cv
246.053 123.502 248.643 120.911 248.643 117.716 cv
248.643 50 li
237.071 50 li
cp
f
237.071 50 mo
237.021 50 li
237.021 117.716 li
237.021 120.939 239.634 123.552 242.857 123.552 cv
246.08 123.552 248.693 120.939 248.693 117.716 cv
248.693 49.95 li
237.021 49.95 li
237.021 50 li
237.071 50 li
237.071 50.05 li
248.593 50.05 li
248.593 117.716 li
248.593 119.3 247.951 120.734 246.913 121.772 cv
245.875 122.81 244.441 123.452 242.857 123.452 cv
241.273 123.452 239.839 122.81 238.801 121.772 cv
237.763 120.734 237.121 119.3 237.121 117.716 cv
237.121 50 li
237.071 50 li
237.071 50.05 li
237.071 50 li
cp
f
249.929 941 mo
249.929 804.677 li
249.929 801.481 252.519 798.892 255.714 798.892 cv
258.91 798.892 261.5 801.481 261.5 804.677 cv
261.5 941 li
249.929 941 li
cp
.811765 .866667 .956863 rgb
f
249.929 941 mo
249.979 941 li
249.979 804.677 li
249.979 803.093 250.621 801.659 251.659 800.621 cv
252.697 799.583 254.13 798.942 255.714 798.942 cv
257.298 798.942 258.732 799.583 259.77 800.621 cv
260.808 801.659 261.45 803.093 261.45 804.677 cv
261.45 940.95 li
249.929 940.95 li
249.929 941 li
249.979 941 li
249.929 941 li
249.929 941.05 li
261.55 941.05 li
261.55 804.677 li
261.55 801.454 258.937 798.842 255.714 798.842 cv
252.491 798.842 249.879 801.454 249.879 804.677 cv
249.879 941.05 li
249.929 941.05 li
249.929 941 li
cp
f
249.929 50 mo
249.929 192.56 li
249.929 195.755 252.519 198.346 255.714 198.346 cv
258.91 198.346 261.5 195.755 261.5 192.56 cv
261.5 50 li
249.929 50 li
cp
f
249.929 50 mo
249.879 50 li
249.879 192.56 li
249.879 195.783 252.491 198.396 255.714 198.396 cv
258.937 198.396 261.55 195.783 261.55 192.56 cv
261.55 49.95 li
249.879 49.95 li
249.879 50 li
249.929 50 li
249.929 50.05 li
261.45 50.05 li
261.45 192.56 li
261.45 194.144 260.808 195.578 259.77 196.616 cv
258.732 197.654 257.298 198.296 255.714 198.296 cv
254.13 198.296 252.697 197.654 251.659 196.616 cv
250.621 195.578 249.979 194.144 249.979 192.56 cv
249.979 50 li
249.929 50 li
249.929 50.05 li
249.929 50 li
cp
f
262.786 941 mo
262.786 802.004 li
262.786 798.809 265.376 796.219 268.571 796.219 cv
271.767 796.219 274.357 798.809 274.357 802.004 cv
274.357 941 li
262.786 941 li
cp
.741176 .796078 .886275 rgb
f
262.786 941 mo
262.836 941 li
262.836 802.004 li
262.836 800.42 263.478 798.986 264.516 797.948 cv
265.554 796.911 266.987 796.269 268.571 796.269 cv
270.155 796.269 271.589 796.911 272.627 797.948 cv
273.665 798.986 274.307 800.42 274.307 802.004 cv
274.307 940.95 li
262.786 940.95 li
262.786 941 li
262.836 941 li
262.786 941 li
262.786 941.05 li
274.407 941.05 li
274.407 802.004 li
274.407 798.781 271.794 796.169 268.571 796.169 cv
265.348 796.169 262.736 798.781 262.736 802.004 cv
262.736 941.05 li
262.786 941.05 li
262.786 941 li
cp
f
262.786 50 mo
262.786 195.233 li
262.786 198.428 265.376 201.019 268.571 201.019 cv
271.767 201.019 274.357 198.428 274.357 195.233 cv
274.357 50 li
262.786 50 li
cp
f
262.786 50 mo
262.736 50 li
262.736 195.233 li
262.736 198.456 265.348 201.069 268.571 201.069 cv
271.794 201.069 274.407 198.456 274.407 195.233 cv
274.407 49.95 li
262.736 49.95 li
262.736 50 li
262.786 50 li
262.786 50.05 li
274.307 50.05 li
274.307 195.233 li
274.307 196.817 273.665 198.251 272.627 199.289 cv
271.589 200.327 270.155 200.969 268.571 200.969 cv
266.987 200.969 265.554 200.327 264.516 199.289 cv
263.478 198.251 262.836 196.817 262.836 195.233 cv
262.836 50 li
262.786 50 li
262.786 50.05 li
262.786 50 li
cp
f
275.643 941 mo
275.643 822.497 li
275.643 819.302 278.233 816.711 281.429 816.711 cv
284.624 816.711 287.214 819.302 287.214 822.497 cv
287.214 941 li
275.643 941 li
cp
.670588 .866667 .956863 rgb
f
275.643 941 mo
275.693 941 li
275.693 822.497 li
275.693 820.913 276.335 819.479 277.373 818.441 cv
278.411 817.403 279.845 816.761 281.429 816.761 cv
283.013 816.761 284.446 817.403 285.484 818.441 cv
286.522 819.479 287.164 820.913 287.164 822.497 cv
287.164 940.95 li
275.643 940.95 li
275.643 941 li
275.693 941 li
275.643 941 li
275.643 941.05 li
287.264 941.05 li
287.264 822.497 li
287.264 819.274 284.652 816.661 281.429 816.661 cv
278.206 816.661 275.593 819.274 275.593 822.497 cv
275.593 941.05 li
275.643 941.05 li
275.643 941 li
cp
f
275.643 50 mo
275.643 91.877 li
275.643 95.0723 278.233 97.6626 281.429 97.6626 cv
284.624 97.6626 287.214 95.0723 287.214 91.877 cv
287.214 50 li
275.643 50 li
cp
f
275.643 50 mo
275.593 50 li
275.593 91.877 li
275.593 95.0999 278.206 97.7126 281.429 97.7126 cv
284.652 97.7126 287.264 95.0999 287.264 91.877 cv
287.264 49.95 li
275.593 49.95 li
275.593 50 li
275.643 50 li
275.643 50.05 li
287.164 50.05 li
287.164 91.877 li
287.164 93.461 286.522 94.8946 285.484 95.9327 cv
284.446 96.9707 283.013 97.6126 281.429 97.6126 cv
279.845 97.6126 278.411 96.9707 277.373 95.9327 cv
276.335 94.8946 275.693 93.461 275.693 91.877 cv
275.693 50 li
275.643 50 li
275.643 50.05 li
275.643 50 li
cp
f
288.5 941 mo
288.5 810.023 li
288.5 806.828 291.09 804.237 294.286 804.237 cv
297.481 804.237 300.071 806.828 300.071 810.023 cv
300.071 941 li
288.5 941 li
cp
.6 .796078 .886275 rgb
f
288.5 941 mo
288.55 941 li
288.55 810.023 li
288.55 808.439 289.192 807.006 290.23 805.967 cv
291.268 804.929 292.702 804.287 294.286 804.287 cv
295.87 804.287 297.303 804.929 298.341 805.967 cv
299.379 807.006 300.021 808.439 300.021 810.023 cv
300.021 940.95 li
288.5 940.95 li
288.5 941 li
288.55 941 li
288.5 941 li
288.5 941.05 li
300.121 941.05 li
300.121 810.023 li
300.121 806.8 297.509 804.187 294.286 804.187 cv
291.063 804.187 288.45 806.8 288.45 810.023 cv
288.45 941.05 li
288.5 941.05 li
288.5 941 li
cp
f
288.5 50 mo
288.5 145.337 li
288.5 148.532 291.09 151.123 294.286 151.123 cv
297.481 151.123 300.071 148.532 300.071 145.337 cv
300.071 50 li
288.5 50 li
cp
f
288.5 50 mo
288.45 50 li
288.45 145.337 li
288.45 148.56 291.063 151.173 294.286 151.173 cv
297.509 151.173 300.121 148.56 300.121 145.337 cv
300.121 49.95 li
288.45 49.95 li
288.45 50 li
288.5 50 li
288.5 50.05 li
300.021 50.05 li
300.021 145.337 li
300.021 146.921 299.379 148.355 298.341 149.393 cv
297.303 150.431 295.87 151.073 294.286 151.073 cv
292.702 151.073 291.268 150.431 290.23 149.393 cv
289.192 148.355 288.55 146.921 288.55 145.337 cv
288.55 50 li
288.5 50 li
288.5 50.05 li
288.5 50 li
cp
f
301.357 941 mo
301.357 886.649 li
301.357 883.453 303.947 880.863 307.143 880.863 cv
310.338 880.863 312.929 883.453 312.929 886.649 cv
312.929 941 li
301.357 941 li
cp
.670588 .72549 .815686 rgb
f
301.357 941 mo
301.407 941 li
301.407 886.649 li
301.407 885.065 302.049 883.631 303.087 882.593 cv
304.125 881.555 305.559 880.913 307.143 880.913 cv
308.727 880.913 310.16 881.555 311.199 882.593 cv
312.237 883.631 312.879 885.065 312.879 886.649 cv
312.879 940.95 li
301.357 940.95 li
301.357 941 li
301.407 941 li
301.357 941 li
301.357 941.05 li
312.979 941.05 li
312.979 886.649 li
312.979 883.425 310.366 880.813 307.143 880.813 cv
303.92 880.813 301.307 883.425 301.307 886.649 cv
301.307 941.05 li
301.357 941.05 li
301.357 941 li
cp
f
301.357 50 mo
301.357 85.6401 li
301.357 88.8354 303.947 91.4258 307.143 91.4258 cv
310.338 91.4258 312.929 88.8354 312.929 85.6401 cv
312.929 50 li
301.357 50 li
cp
f
301.357 50 mo
301.307 50 li
301.307 85.6401 li
301.307 88.8631 303.92 91.4757 307.143 91.4758 cv
310.366 91.4757 312.979 88.8631 312.979 85.6401 cv
312.979 49.95 li
301.307 49.95 li
301.307 50 li
301.357 50 li
301.357 50.05 li
312.879 50.05 li
312.879 85.6401 li
312.879 87.2241 312.237 88.6577 311.199 89.6958 cv
310.16 90.7339 308.727 91.3757 307.143 91.3758 cv
305.559 91.3757 304.125 90.7339 303.087 89.6958 cv
302.049 88.6577 301.407 87.2241 301.407 85.6401 cv
301.407 50 li
301.357 50 li
301.357 50.05 li
301.357 50 li
cp
f
314.214 941 mo
314.214 877.739 li
314.214 874.544 316.805 871.953 320 871.953 cv
323.195 871.953 325.786 874.544 325.786 877.739 cv
325.786 941 li
314.214 941 li
cp
.741176 .654902 .745098 rgb
f
314.214 941 mo
314.264 941 li
314.264 877.739 li
314.264 876.155 314.906 874.721 315.944 873.683 cv
316.982 872.645 318.416 872.003 320 872.003 cv
321.584 872.003 323.018 872.645 324.056 873.683 cv
325.094 874.721 325.736 876.155 325.736 877.739 cv
325.736 940.95 li
314.214 940.95 li
314.214 941 li
314.264 941 li
314.214 941 li
314.214 941.05 li
325.836 941.05 li
325.836 877.739 li
325.836 874.516 323.223 871.903 320 871.903 cv
316.777 871.903 314.164 874.516 314.164 877.739 cv
314.164 941.05 li
314.214 941.05 li
314.214 941 li
cp
f
314.214 50 mo
314.214 176.522 li
314.214 179.717 316.805 182.308 320 182.308 cv
323.195 182.308 325.786 179.717 325.786 176.522 cv
325.786 50 li
314.214 50 li
cp
f
314.214 50 mo
314.164 50 li
314.164 176.522 li
314.164 179.745 316.777 182.358 320 182.358 cv
323.223 182.358 325.836 179.745 325.836 176.522 cv
325.836 49.95 li
314.164 49.95 li
314.164 50 li
314.214 50 li
314.214 50.05 li
325.736 50.05 li
325.736 176.522 li
325.736 178.106 325.094 179.54 324.056 180.578 cv
323.018 181.616 321.584 182.258 320 182.258 cv
318.416 182.258 316.982 181.616 315.944 180.578 cv
314.906 179.54 314.264 178.106 314.264 176.522 cv
314.264 50 li
314.214 50 li
314.214 50.05 li
314.214 50 li
cp
f
327.071 941 mo
327.071 787.748 li
327.071 784.553 329.662 781.962 332.857 781.962 cv
336.053 781.962 338.643 784.553 338.643 787.748 cv
338.643 941 li
327.071 941 li
cp
.811765 .72549 .67451 rgb
f
327.071 941 mo
327.121 941 li
327.121 787.748 li
327.121 786.164 327.763 784.73 328.801 783.692 cv
329.84 782.654 331.273 782.012 332.857 782.012 cv
334.441 782.012 335.875 782.654 336.913 783.692 cv
337.951 784.73 338.593 786.164 338.593 787.748 cv
338.593 940.95 li
327.071 940.95 li
327.071 941 li
327.121 941 li
327.071 941 li
327.071 941.05 li
338.693 941.05 li
338.693 787.748 li
338.693 784.525 336.08 781.912 332.857 781.912 cv
329.634 781.912 327.021 784.525 327.021 787.748 cv
327.021 941.05 li
327.071 941.05 li
327.071 941 li
cp
f
327.071 50 mo
327.071 146.228 li
327.071 149.423 329.662 152.014 332.857 152.014 cv
336.053 152.014 338.643 149.423 338.643 146.228 cv
338.643 50 li
327.071 50 li
cp
f
327.071 50 mo
327.021 50 li
327.021 146.228 li
327.021 149.451 329.634 152.064 332.857 152.064 cv
336.08 152.064 338.693 149.451 338.693 146.228 cv
338.693 49.95 li
327.021 49.95 li
327.021 50 li
327.071 50 li
327.071 50.05 li
338.593 50.05 li
338.593 146.228 li
338.593 147.812 337.951 149.246 336.913 150.284 cv
335.875 151.322 334.441 151.964 332.857 151.964 cv
331.273 151.964 329.84 151.322 328.801 150.284 cv
327.763 149.246 327.121 147.812 327.121 146.228 cv
327.121 50 li
327.071 50 li
327.071 50.05 li
327.071 50 li
cp
f
339.929 941 mo
339.929 798.44 li
339.929 795.244 342.519 792.654 345.714 792.654 cv
348.91 792.654 351.5 795.244 351.5 798.44 cv
351.5 941 li
339.929 941 li
cp
.882353 .654902 .603922 rgb
f
339.929 941 mo
339.979 941 li
339.979 798.44 li
339.979 796.856 340.62 795.422 341.658 794.384 cv
342.696 793.346 344.13 792.704 345.714 792.704 cv
347.298 792.704 348.732 793.346 349.77 794.384 cv
350.808 795.422 351.45 796.856 351.45 798.44 cv
351.45 940.95 li
339.929 940.95 li
339.929 941 li
339.979 941 li
339.929 941 li
339.929 941.05 li
351.55 941.05 li
351.55 798.44 li
351.55 795.216 348.938 792.604 345.714 792.604 cv
342.491 792.604 339.879 795.216 339.879 798.44 cv
339.879 941.05 li
339.929 941.05 li
339.929 941 li
cp
f
339.929 50 mo
339.929 139.991 li
339.929 143.187 342.519 145.777 345.714 145.777 cv
348.91 145.777 351.5 143.187 351.5 139.991 cv
351.5 50 li
339.929 50 li
cp
f
339.929 50 mo
339.879 50 li
339.879 139.991 li
339.879 143.214 342.491 145.827 345.714 145.827 cv
348.938 145.827 351.55 143.214 351.55 139.991 cv
351.55 49.95 li
339.879 49.95 li
339.879 50 li
339.929 50 li
339.929 50.05 li
351.45 50.05 li
351.45 139.991 li
351.45 141.575 350.808 143.009 349.77 144.047 cv
348.732 145.085 347.298 145.727 345.714 145.727 cv
344.13 145.727 342.696 145.085 341.658 144.047 cv
340.62 143.009 339.979 141.575 339.979 139.991 cv
339.979 50 li
339.929 50 li
339.929 50.05 li
339.929 50 li
cp
f
352.786 941 mo
352.786 793.985 li
352.786 790.79 355.376 788.199 358.571 788.199 cv
361.767 788.199 364.357 790.79 364.357 793.985 cv
364.357 941 li
352.786 941 li
cp
.952941 .584314 .533333 rgb
f
352.786 941 mo
352.836 941 li
352.836 793.985 li
352.836 792.401 353.478 790.968 354.516 789.929 cv
355.554 788.891 356.987 788.249 358.571 788.249 cv
360.155 788.249 361.589 788.891 362.627 789.929 cv
363.665 790.968 364.307 792.401 364.307 793.985 cv
364.307 940.95 li
352.786 940.95 li
352.786 941 li
352.836 941 li
352.786 941 li
352.786 941.05 li
364.407 941.05 li
364.407 793.985 li
364.407 790.762 361.794 788.149 358.571 788.149 cv
355.348 788.149 352.736 790.762 352.736 793.985 cv
352.736 941.05 li
352.786 941.05 li
352.786 941 li
cp
f
352.786 50 mo
352.786 123.953 li
352.786 127.148 355.376 129.739 358.571 129.739 cv
361.767 129.739 364.357 127.148 364.357 123.953 cv
364.357 50 li
352.786 50 li
cp
f
352.786 50 mo
352.736 50 li
352.736 123.953 li
352.736 127.176 355.348 129.789 358.571 129.789 cv
361.794 129.789 364.407 127.176 364.407 123.953 cv
364.407 49.95 li
352.736 49.95 li
352.736 50 li
352.786 50 li
352.786 50.05 li
364.307 50.05 li
364.307 123.953 li
364.307 125.537 363.665 126.971 362.627 128.009 cv
361.589 129.047 360.155 129.689 358.571 129.689 cv
356.987 129.689 355.554 129.047 354.516 128.009 cv
353.478 126.971 352.836 125.537 352.836 123.953 cv
352.836 50 li
352.786 50 li
352.786 50.05 li
352.786 50 li
cp
f
365.643 941 mo
365.643 838.535 li
365.643 835.34 368.233 832.749 371.429 832.749 cv
374.624 832.749 377.214 835.34 377.214 838.535 cv
377.214 941 li
365.643 941 li
cp
.882353 .513726 .603922 rgb
f
365.643 941 mo
365.693 941 li
365.693 838.535 li
365.693 836.951 366.335 835.517 367.373 834.479 cv
368.411 833.441 369.845 832.799 371.429 832.799 cv
373.013 832.799 374.446 833.441 375.484 834.479 cv
376.522 835.517 377.164 836.951 377.164 838.535 cv
377.164 940.95 li
365.643 940.95 li
365.643 941 li
365.693 941 li
365.643 941 li
365.643 941.05 li
377.264 941.05 li
377.264 838.535 li
377.264 835.312 374.652 832.699 371.429 832.699 cv
368.206 832.699 365.593 835.312 365.593 838.535 cv
365.593 941.05 li
365.643 941.05 li
365.643 941 li
cp
f
365.643 50 mo
365.643 123.953 li
365.643 127.148 368.233 129.739 371.429 129.739 cv
374.624 129.739 377.214 127.148 377.214 123.953 cv
377.214 50 li
365.643 50 li
cp
f
365.643 50 mo
365.593 50 li
365.593 123.953 li
365.593 127.176 368.206 129.789 371.429 129.789 cv
374.652 129.789 377.264 127.176 377.264 123.953 cv
377.264 49.95 li
365.593 49.95 li
365.593 50 li
365.643 50 li
365.643 50.05 li
377.164 50.05 li
377.164 123.953 li
377.164 125.537 376.522 126.971 375.484 128.009 cv
374.446 129.047 373.013 129.689 371.429 129.689 cv
369.845 129.689 368.411 129.047 367.373 128.009 cv
366.335 126.971 365.693 125.537 365.693 123.953 cv
365.693 50 li
365.643 50 li
365.643 50.05 li
365.643 50 li
cp
f
378.5 941 mo
378.5 816.26 li
378.5 813.064 381.09 810.475 384.286 810.475 cv
387.481 810.475 390.071 813.064 390.071 816.26 cv
390.071 941 li
378.5 941 li
cp
.952941 .443137 .533333 rgb
f
378.5 941 mo
378.55 941 li
378.55 816.26 li
378.55 814.676 379.192 813.242 380.23 812.204 cv
381.268 811.166 382.702 810.525 384.286 810.525 cv
385.87 810.525 387.304 811.166 388.342 812.204 cv
389.379 813.242 390.021 814.676 390.021 816.26 cv
390.021 940.95 li
378.5 940.95 li
378.5 941 li
378.55 941 li
378.5 941 li
378.5 941.05 li
390.121 941.05 li
390.121 816.26 li
390.121 813.037 387.509 810.425 384.286 810.425 cv
381.062 810.425 378.45 813.037 378.45 816.26 cv
378.45 941.05 li
378.5 941.05 li
378.5 941 li
cp
f
378.5 50 mo
378.5 107.915 li
378.5 111.11 381.09 113.701 384.286 113.701 cv
387.481 113.701 390.071 111.11 390.071 107.915 cv
390.071 50 li
378.5 50 li
cp
f
378.5 50 mo
378.45 50 li
378.45 107.915 li
378.45 111.138 381.062 113.751 384.286 113.751 cv
387.509 113.751 390.121 111.138 390.121 107.915 cv
390.121 49.95 li
378.45 49.95 li
378.45 50 li
378.5 50 li
378.5 50.05 li
390.021 50.05 li
390.021 107.915 li
390.021 109.499 389.379 110.933 388.342 111.971 cv
387.304 113.009 385.87 113.651 384.286 113.651 cv
382.702 113.651 381.268 113.009 380.23 111.971 cv
379.192 110.933 378.55 109.499 378.55 107.915 cv
378.55 50 li
378.5 50 li
378.5 50.05 li
378.5 50 li
cp
f
391.357 941 mo
391.357 790.421 li
391.357 787.226 393.947 784.636 397.143 784.636 cv
400.338 784.636 402.929 787.226 402.929 790.421 cv
402.929 941 li
391.357 941 li
cp
.882353 .372549 .462745 rgb
f
391.357 941 mo
391.407 941 li
391.407 790.421 li
391.407 788.837 392.049 787.403 393.087 786.365 cv
394.125 785.328 395.559 784.686 397.143 784.686 cv
398.727 784.686 400.16 785.328 401.199 786.365 cv
402.237 787.403 402.879 788.837 402.879 790.421 cv
402.879 940.95 li
391.357 940.95 li
391.357 941 li
391.407 941 li
391.357 941 li
391.357 941.05 li
402.979 941.05 li
402.979 790.421 li
402.979 787.198 400.366 784.586 397.143 784.586 cv
393.92 784.586 391.307 787.198 391.307 790.421 cv
391.307 941.05 li
391.357 941.05 li
391.357 941 li
cp
f
391.357 50 mo
391.357 100.787 li
391.357 103.982 393.947 106.573 397.143 106.573 cv
400.338 106.573 402.929 103.982 402.929 100.787 cv
402.929 50 li
391.357 50 li
cp
f
391.357 50 mo
391.307 50 li
391.307 100.787 li
391.307 104.01 393.92 106.623 397.143 106.623 cv
400.366 106.623 402.979 104.01 402.979 100.787 cv
402.979 49.95 li
391.307 49.95 li
391.307 50 li
391.357 50 li
391.357 50.05 li
402.879 50.05 li
402.879 100.787 li
402.879 102.371 402.237 103.805 401.199 104.843 cv
400.16 105.881 398.727 106.523 397.143 106.523 cv
395.559 106.523 394.125 105.881 393.087 104.843 cv
392.049 103.805 391.407 102.371 391.407 100.787 cv
391.407 50 li
391.357 50 li
391.357 50.05 li
391.357 50 li
cp
f
404.214 941 mo
404.214 883.976 li
404.214 880.78 406.805 878.19 410 878.19 cv
413.195 878.19 415.786 880.78 415.786 883.976 cv
415.786 941 li
404.214 941 li
cp
.811765 .443137 .533333 rgb
f
404.214 941 mo
404.264 941 li
404.264 883.976 li
404.264 882.392 404.906 880.958 405.944 879.92 cv
406.982 878.882 408.416 878.24 410 878.24 cv
411.584 878.24 413.018 878.882 414.056 879.92 cv
415.094 880.958 415.736 882.392 415.736 883.976 cv
415.736 940.95 li
404.214 940.95 li
404.214 941 li
404.264 941 li
404.214 941 li
404.214 941.05 li
415.836 941.05 li
415.836 883.976 li
415.836 880.753 413.223 878.14 410 878.14 cv
406.777 878.14 404.164 880.753 404.164 883.976 cv
404.164 941.05 li
404.214 941.05 li
404.214 941 li
cp
f
404.214 50 mo
404.214 187.214 li
404.214 190.409 406.805 193 410 193 cv
413.195 193 415.786 190.409 415.786 187.214 cv
415.786 50 li
404.214 50 li
cp
f
404.214 50 mo
404.164 50 li
404.164 187.214 li
404.164 190.437 406.777 193.05 410 193.05 cv
413.223 193.05 415.836 190.437 415.836 187.214 cv
415.836 49.95 li
404.164 49.95 li
404.164 50 li
404.214 50 li
404.214 50.05 li
415.736 50.05 li
415.736 187.214 li
415.736 188.798 415.094 190.232 414.056 191.27 cv
413.018 192.308 411.584 192.95 410 192.95 cv
408.416 192.95 406.982 192.308 405.944 191.27 cv
404.906 190.232 404.264 188.798 404.264 187.214 cv
404.264 50 li
404.214 50 li
404.214 50.05 li
404.214 50 li
cp
f
417.071 941 mo
417.071 802.895 li
417.071 799.699 419.662 797.109 422.857 797.109 cv
426.053 797.109 428.643 799.699 428.643 802.895 cv
428.643 941 li
417.071 941 li
cp
.882353 .513726 .603922 rgb
f
417.071 941 mo
417.121 941 li
417.121 802.895 li
417.121 801.31 417.763 799.877 418.801 798.839 cv
419.84 797.801 421.273 797.159 422.857 797.159 cv
424.441 797.159 425.875 797.801 426.913 798.839 cv
427.951 799.877 428.593 801.31 428.593 802.895 cv
428.593 940.95 li
417.071 940.95 li
417.071 941 li
417.121 941 li
417.071 941 li
417.071 941.05 li
428.693 941.05 li
428.693 802.895 li
428.693 799.672 426.08 797.059 422.857 797.059 cv
419.634 797.059 417.021 799.672 417.021 802.895 cv
417.021 941.05 li
417.071 941.05 li
417.071 941 li
cp
f
417.071 50 mo
417.071 157.811 li
417.071 161.006 419.662 163.597 422.857 163.597 cv
426.053 163.597 428.643 161.006 428.643 157.811 cv
428.643 50 li
417.071 50 li
cp
f
417.071 50 mo
417.021 50 li
417.021 157.811 li
417.021 161.034 419.634 163.647 422.857 163.647 cv
426.08 163.647 428.693 161.034 428.693 157.811 cv
428.693 49.95 li
417.021 49.95 li
417.021 50 li
417.071 50 li
417.071 50.05 li
428.593 50.05 li
428.593 157.811 li
428.593 159.395 427.951 160.829 426.913 161.867 cv
425.875 162.905 424.441 163.547 422.857 163.547 cv
421.273 163.547 419.84 162.905 418.801 161.867 cv
417.763 160.829 417.121 159.395 417.121 157.811 cv
417.121 50 li
417.071 50 li
417.071 50.05 li
417.071 50 li
cp
f
429.929 941 mo
429.929 789.53 li
429.929 786.335 432.519 783.744 435.714 783.744 cv
438.91 783.744 441.5 786.335 441.5 789.53 cv
441.5 941 li
429.929 941 li
cp
.811765 .443137 .67451 rgb
f
429.929 941 mo
429.979 941 li
429.979 789.53 li
429.979 787.946 430.62 786.513 431.658 785.474 cv
432.696 784.436 434.13 783.794 435.714 783.794 cv
437.298 783.794 438.732 784.436 439.77 785.474 cv
440.808 786.513 441.45 787.946 441.45 789.53 cv
441.45 940.95 li
429.929 940.95 li
429.929 941 li
429.979 941 li
429.929 941 li
429.929 941.05 li
441.55 941.05 li
441.55 789.53 li
441.55 786.307 438.938 783.694 435.714 783.694 cv
432.491 783.694 429.879 786.307 429.879 789.53 cv
429.879 941.05 li
429.929 941.05 li
429.929 941 li
cp
f
429.929 50 mo
429.929 96.332 li
429.929 99.5273 432.519 102.118 435.714 102.118 cv
438.91 102.118 441.5 99.5273 441.5 96.332 cv
441.5 50 li
429.929 50 li
cp
f
429.929 50 mo
429.879 50 li
429.879 96.332 li
429.879 99.555 432.491 102.168 435.714 102.168 cv
438.938 102.168 441.55 99.555 441.55 96.332 cv
441.55 49.95 li
429.879 49.95 li
429.879 50 li
429.929 50 li
429.929 50.05 li
441.45 50.05 li
441.45 96.332 li
441.45 97.916 440.808 99.3496 439.77 100.388 cv
438.732 101.426 437.298 102.068 435.714 102.068 cv
434.13 102.068 432.696 101.426 431.658 100.388 cv
430.62 99.3496 429.979 97.916 429.979 96.332 cv
429.979 50 li
429.929 50 li
429.929 50.05 li
429.929 50 li
cp
f
442.786 941 mo
442.786 905.36 li
442.786 902.165 445.376 899.574 448.571 899.574 cv
451.767 899.574 454.357 902.165 454.357 905.36 cv
454.357 941 li
442.786 941 li
cp
.741176 .513726 .603922 rgb
f
442.786 941 mo
442.836 941 li
442.836 905.36 li
442.836 903.776 443.478 902.343 444.516 901.304 cv
445.554 900.266 446.987 899.624 448.571 899.624 cv
450.155 899.624 451.589 900.266 452.627 901.304 cv
453.665 902.343 454.307 903.776 454.307 905.36 cv
454.307 940.95 li
442.786 940.95 li
442.786 941 li
442.836 941 li
442.786 941 li
442.786 941.05 li
454.407 941.05 li
454.407 905.36 li
454.407 902.137 451.794 899.524 448.571 899.524 cv
445.348 899.524 442.736 902.137 442.736 905.36 cv
442.736 941.05 li
442.786 941.05 li
442.786 941 li
cp
f
442.786 50 mo
442.786 147.119 li
442.786 150.314 445.376 152.905 448.571 152.905 cv
451.767 152.905 454.357 150.314 454.357 147.119 cv
454.357 50 li
442.786 50 li
cp
f
442.786 50 mo
442.736 50 li
442.736 147.119 li
442.736 150.342 445.348 152.955 448.571 152.955 cv
451.794 152.955 454.407 150.342 454.407 147.119 cv
454.407 49.95 li
442.736 49.95 li
442.736 50 li
442.786 50 li
442.786 50.05 li
454.307 50.05 li
454.307 147.119 li
454.307 148.703 453.665 150.137 452.627 151.175 cv
451.589 152.213 450.155 152.855 448.571 152.855 cv
446.987 152.855 445.554 152.213 444.516 151.175 cv
443.478 150.137 442.836 148.703 442.836 147.119 cv
442.836 50 li
442.786 50 li
442.786 50.05 li
442.786 50 li
cp
f
455.643 941 mo
455.643 799.331 li
455.643 796.136 458.233 793.545 461.429 793.545 cv
464.624 793.545 467.214 796.136 467.214 799.331 cv
467.214 941 li
455.643 941 li
cp
.811765 .584314 .533333 rgb
f
455.643 941 mo
455.693 941 li
455.693 799.331 li
455.693 797.747 456.335 796.313 457.373 795.275 cv
458.411 794.237 459.845 793.595 461.429 793.595 cv
463.013 793.595 464.446 794.237 465.484 795.275 cv
466.522 796.313 467.164 797.747 467.164 799.331 cv
467.164 940.95 li
455.643 940.95 li
455.643 941 li
455.693 941 li
455.643 941 li
455.643 941.05 li
467.264 941.05 li
467.264 799.331 li
467.264 796.108 464.652 793.495 461.429 793.495 cv
458.206 793.495 455.593 796.108 455.593 799.331 cv
455.593 941.05 li
455.643 941.05 li
455.643 941 li
cp
f
455.643 50 mo
455.643 158.702 li
455.643 161.897 458.233 164.488 461.429 164.488 cv
464.624 164.488 467.214 161.897 467.214 158.702 cv
467.214 50 li
455.643 50 li
cp
f
455.643 50 mo
455.593 50 li
455.593 158.702 li
455.593 161.925 458.206 164.538 461.429 164.538 cv
464.652 164.538 467.264 161.925 467.264 158.702 cv
467.264 49.95 li
455.593 49.95 li
455.593 50 li
455.643 50 li
455.643 50.05 li
467.164 50.05 li
467.164 158.702 li
467.164 160.286 466.522 161.72 465.484 162.758 cv
464.446 163.796 463.013 164.438 461.429 164.438 cv
459.845 164.438 458.411 163.796 457.373 162.758 cv
456.335 161.72 455.693 160.286 455.693 158.702 cv
455.693 50 li
455.643 50 li
455.643 50.05 li
455.643 50 li
cp
f
468.5 941 mo
468.5 889.322 li
468.5 886.127 471.091 883.536 474.286 883.536 cv
477.481 883.536 480.071 886.127 480.071 889.322 cv
480.071 941 li
468.5 941 li
cp
.882353 .654902 .462745 rgb
f
468.5 941 mo
468.55 941 li
468.55 889.322 li
468.55 887.738 469.192 886.305 470.23 885.266 cv
471.268 884.228 472.702 883.586 474.286 883.586 cv
475.87 883.586 477.304 884.228 478.342 885.266 cv
479.379 886.305 480.021 887.738 480.021 889.322 cv
480.021 940.95 li
468.5 940.95 li
468.5 941 li
468.55 941 li
468.5 941 li
468.5 941.05 li
480.121 941.05 li
480.121 889.322 li
480.121 886.099 477.509 883.486 474.286 883.486 cv
471.063 883.486 468.45 886.099 468.45 889.322 cv
468.45 941.05 li
468.5 941.05 li
468.5 941 li
cp
f
468.5 50 mo
468.5 157.811 li
468.5 161.006 471.091 163.597 474.286 163.597 cv
477.481 163.597 480.071 161.006 480.071 157.811 cv
480.071 50 li
468.5 50 li
cp
f
468.5 50 mo
468.45 50 li
468.45 157.811 li
468.45 161.034 471.063 163.647 474.286 163.647 cv
477.509 163.647 480.121 161.034 480.121 157.811 cv
480.121 49.95 li
468.45 49.95 li
468.45 50 li
468.5 50 li
468.5 50.05 li
480.021 50.05 li
480.021 157.811 li
480.021 159.395 479.379 160.829 478.342 161.867 cv
477.304 162.905 475.87 163.547 474.286 163.547 cv
472.702 163.547 471.268 162.905 470.23 161.867 cv
469.192 160.829 468.55 159.395 468.55 157.811 cv
468.55 50 li
468.5 50 li
468.5 50.05 li
468.5 50 li
cp
f
481.357 941 mo
481.357 825.17 li
481.357 821.975 483.947 819.385 487.143 819.385 cv
490.338 819.385 492.929 821.975 492.929 825.17 cv
492.929 941 li
481.357 941 li
cp
.952941 .72549 .533333 rgb
f
481.357 941 mo
481.407 941 li
481.407 825.17 li
481.407 823.586 482.049 822.152 483.087 821.114 cv
484.125 820.077 485.559 819.435 487.143 819.435 cv
488.727 819.435 490.16 820.077 491.199 821.114 cv
492.237 822.152 492.879 823.586 492.879 825.17 cv
492.879 940.95 li
481.357 940.95 li
481.357 941 li
481.407 941 li
481.357 941 li
481.357 941.05 li
492.979 941.05 li
492.979 825.17 li
492.979 821.947 490.366 819.335 487.143 819.335 cv
483.92 819.335 481.307 821.947 481.307 825.17 cv
481.307 941.05 li
481.357 941.05 li
481.357 941 li
cp
f
481.357 50 mo
481.357 109.697 li
481.357 112.893 483.947 115.483 487.143 115.483 cv
490.338 115.483 492.929 112.893 492.929 109.697 cv
492.929 50 li
481.357 50 li
cp
f
481.357 50 mo
481.307 50 li
481.307 109.697 li
481.307 112.92 483.92 115.533 487.143 115.533 cv
490.366 115.533 492.979 112.92 492.979 109.697 cv
492.979 49.95 li
481.307 49.95 li
481.307 50 li
481.357 50 li
481.357 50.05 li
492.879 50.05 li
492.879 109.697 li
492.879 111.281 492.237 112.715 491.199 113.753 cv
490.16 114.791 488.727 115.433 487.143 115.433 cv
485.559 115.433 484.125 114.791 483.087 113.753 cv
482.049 112.715 481.407 111.281 481.407 109.697 cv
481.407 50 li
481.357 50 li
481.357 50.05 li
481.357 50 li
cp
f
494.214 941 mo
494.214 904.469 li
494.214 901.273 496.805 898.684 500 898.684 cv
503.195 898.684 505.786 901.273 505.786 904.469 cv
505.786 941 li
494.214 941 li
cp
.882353 .654902 .603922 rgb
f
494.214 941 mo
494.264 941 li
494.264 904.469 li
494.264 902.885 494.906 901.451 495.944 900.413 cv
496.982 899.375 498.416 898.734 500 898.734 cv
501.584 898.734 503.018 899.375 504.056 900.413 cv
505.094 901.451 505.736 902.885 505.736 904.469 cv
505.736 940.95 li
494.214 940.95 li
494.214 941 li
494.264 941 li
494.214 941 li
494.214 941.05 li
505.836 941.05 li
505.836 904.469 li
505.836 901.246 503.223 898.634 500 898.634 cv
496.777 898.634 494.164 901.246 494.164 904.469 cv
494.164 941.05 li
494.214 941.05 li
494.214 941 li
cp
f
494.214 50 mo
494.214 159.593 li
494.214 162.789 496.805 165.379 500 165.379 cv
503.195 165.379 505.786 162.789 505.786 159.593 cv
505.786 50 li
494.214 50 li
cp
f
494.214 50 mo
494.164 50 li
494.164 159.593 li
494.164 162.816 496.777 165.429 500 165.429 cv
503.223 165.429 505.836 162.816 505.836 159.593 cv
505.836 49.95 li
494.164 49.95 li
494.164 50 li
494.214 50 li
494.214 50.05 li
505.736 50.05 li
505.736 159.593 li
505.736 161.177 505.094 162.611 504.056 163.649 cv
503.018 164.687 501.584 165.329 500 165.329 cv
498.416 165.329 496.982 164.687 495.944 163.649 cv
494.906 162.611 494.264 161.177 494.264 159.593 cv
494.264 50 li
494.214 50 li
494.214 50.05 li
494.214 50 li
cp
f
507.071 941 mo
507.071 895.559 li
507.071 892.363 509.662 889.773 512.857 889.773 cv
516.053 889.773 518.643 892.363 518.643 895.559 cv
518.643 941 li
507.071 941 li
cp
.811765 .584314 .67451 rgb
f
507.071 941 mo
507.121 941 li
507.121 895.559 li
507.121 893.975 507.763 892.541 508.801 891.503 cv
509.84 890.465 511.273 889.823 512.857 889.823 cv
514.441 889.823 515.875 890.465 516.913 891.503 cv
517.951 892.541 518.593 893.975 518.593 895.559 cv
518.593 940.95 li
507.071 940.95 li
507.071 941 li
507.121 941 li
507.071 941 li
507.071 941.05 li
518.693 941.05 li
518.693 895.559 li
518.693 892.336 516.08 889.723 512.857 889.723 cv
509.634 889.723 507.021 892.336 507.021 895.559 cv
507.021 941.05 li
507.071 941.05 li
507.071 941 li
cp
f
507.071 50 mo
507.071 156.029 li
507.071 159.225 509.662 161.814 512.857 161.814 cv
516.053 161.814 518.643 159.225 518.643 156.029 cv
518.643 50 li
507.071 50 li
cp
f
507.071 50 mo
507.021 50 li
507.021 156.029 li
507.021 159.252 509.634 161.864 512.857 161.864 cv
516.08 161.864 518.693 159.252 518.693 156.029 cv
518.693 49.95 li
507.021 49.95 li
507.021 50 li
507.071 50 li
507.071 50.05 li
518.593 50.05 li
518.593 156.029 li
518.593 157.613 517.951 159.047 516.913 160.085 cv
515.875 161.123 514.441 161.764 512.857 161.764 cv
511.273 161.764 509.84 161.123 508.801 160.085 cv
507.763 159.047 507.121 157.613 507.121 156.029 cv
507.121 50 li
507.071 50 li
507.071 50.05 li
507.071 50 li
cp
f
519.929 941 mo
519.929 861.701 li
519.929 858.506 522.519 855.915 525.714 855.915 cv
528.91 855.915 531.5 858.506 531.5 861.701 cv
531.5 941 li
519.929 941 li
cp
.882353 .654902 .745098 rgb
f
519.929 941 mo
519.979 941 li
519.979 861.701 li
519.979 860.117 520.62 858.683 521.658 857.645 cv
522.696 856.607 524.13 855.965 525.714 855.965 cv
527.298 855.965 528.732 856.607 529.77 857.645 cv
530.808 858.683 531.45 860.117 531.45 861.701 cv
531.45 940.95 li
519.929 940.95 li
519.929 941 li
519.979 941 li
519.929 941 li
519.929 941.05 li
531.55 941.05 li
531.55 861.701 li
531.55 858.478 528.938 855.865 525.714 855.865 cv
522.491 855.865 519.879 858.478 519.879 861.701 cv
519.879 941.05 li
519.929 941.05 li
519.929 941 li
cp
f
519.929 50 mo
519.929 123.953 li
519.929 127.148 522.519 129.739 525.714 129.739 cv
528.91 129.739 531.5 127.148 531.5 123.953 cv
531.5 50 li
519.929 50 li
cp
f
519.929 50 mo
519.879 50 li
519.879 123.953 li
519.879 127.176 522.491 129.789 525.714 129.789 cv
528.938 129.789 531.55 127.176 531.55 123.953 cv
531.55 49.95 li
519.879 49.95 li
519.879 50 li
519.929 50 li
519.929 50.05 li
531.45 50.05 li
531.45 123.953 li
531.45 125.537 530.808 126.971 529.77 128.009 cv
528.732 129.047 527.298 129.689 525.714 129.689 cv
524.13 129.689 522.696 129.047 521.658 128.009 cv
520.62 126.971 519.979 125.537 519.979 123.953 cv
519.979 50 li
519.929 50 li
519.929 50.05 li
519.929 50 li
cp
f
532.786 941 mo
532.786 804.677 li
532.786 801.481 535.376 798.892 538.571 798.892 cv
541.767 798.892 544.357 801.481 544.357 804.677 cv
544.357 941 li
532.786 941 li
cp
.952941 .72549 .67451 rgb
f
532.786 941 mo
532.836 941 li
532.836 804.677 li
532.836 803.093 533.478 801.659 534.516 800.621 cv
535.554 799.583 536.987 798.942 538.571 798.942 cv
540.155 798.942 541.589 799.583 542.627 800.621 cv
543.665 801.659 544.307 803.093 544.307 804.677 cv
544.307 940.95 li
532.786 940.95 li
532.786 941 li
532.836 941 li
532.786 941 li
532.786 941.05 li
544.407 941.05 li
544.407 804.677 li
544.407 801.454 541.794 798.842 538.571 798.842 cv
535.348 798.842 532.736 801.454 532.736 804.677 cv
532.736 941.05 li
532.786 941.05 li
532.786 941 li
cp
f
532.786 50 mo
532.786 149.792 li
532.786 152.987 535.376 155.578 538.571 155.578 cv
541.767 155.578 544.357 152.987 544.357 149.792 cv
544.357 50 li
532.786 50 li
cp
f
532.786 50 mo
532.736 50 li
532.736 149.792 li
532.736 153.015 535.348 155.628 538.571 155.628 cv
541.794 155.628 544.407 153.015 544.407 149.792 cv
544.407 49.95 li
532.736 49.95 li
532.736 50 li
532.786 50 li
532.786 50.05 li
544.307 50.05 li
544.307 149.792 li
544.307 151.376 543.665 152.81 542.627 153.848 cv
541.589 154.886 540.155 155.528 538.571 155.528 cv
536.987 155.528 535.554 154.886 534.516 153.848 cv
533.478 152.81 532.836 151.376 532.836 149.792 cv
532.836 50 li
532.786 50 li
532.786 50.05 li
532.786 50 li
cp
f
545.643 941 mo
545.643 789.53 li
545.643 786.335 548.233 783.744 551.429 783.744 cv
554.624 783.744 557.214 786.335 557.214 789.53 cv
557.214 941 li
545.643 941 li
cp
.882353 .654902 .745098 rgb
f
545.643 941 mo
545.693 941 li
545.693 789.53 li
545.693 787.946 546.335 786.513 547.373 785.474 cv
548.411 784.436 549.845 783.794 551.429 783.794 cv
553.013 783.794 554.446 784.436 555.484 785.474 cv
556.522 786.513 557.164 787.946 557.164 789.53 cv
557.164 940.95 li
545.643 940.95 li
545.643 941 li
545.693 941 li
545.643 941 li
545.643 941.05 li
557.264 941.05 li
557.264 789.53 li
557.264 786.307 554.652 783.694 551.429 783.694 cv
548.206 783.694 545.593 786.307 545.593 789.53 cv
545.593 941.05 li
545.643 941.05 li
545.643 941 li
cp
f
545.643 50 mo
545.643 139.1 li
545.643 142.295 548.233 144.886 551.429 144.886 cv
554.624 144.886 557.214 142.295 557.214 139.1 cv
557.214 50 li
545.643 50 li
cp
f
545.643 50 mo
545.593 50 li
545.593 139.1 li
545.593 142.323 548.206 144.936 551.429 144.936 cv
554.652 144.936 557.264 142.323 557.264 139.1 cv
557.264 49.95 li
545.593 49.95 li
545.593 50 li
545.643 50 li
545.643 50.05 li
557.164 50.05 li
557.164 139.1 li
557.164 140.684 556.522 142.118 555.484 143.156 cv
554.446 144.194 553.013 144.836 551.429 144.836 cv
549.845 144.836 548.411 144.194 547.373 143.156 cv
546.335 142.118 545.693 140.684 545.693 139.1 cv
545.693 50 li
545.643 50 li
545.643 50.05 li
545.643 50 li
cp
f
558.5 941 mo
558.5 818.933 li
558.5 815.737 561.09 813.147 564.286 813.147 cv
567.481 813.147 570.071 815.737 570.071 818.933 cv
570.071 941 li
558.5 941 li
cp
.952941 .584314 .815686 rgb
f
558.5 941 mo
558.55 941 li
558.55 818.933 li
558.55 817.349 559.192 815.915 560.23 814.877 cv
561.268 813.839 562.702 813.197 564.286 813.197 cv
565.87 813.197 567.304 813.839 568.342 814.877 cv
569.379 815.915 570.021 817.349 570.021 818.933 cv
570.021 940.95 li
558.5 940.95 li
558.5 941 li
558.55 941 li
558.5 941 li
558.5 941.05 li
570.121 941.05 li
570.121 818.933 li
570.121 815.71 567.509 813.097 564.286 813.097 cv
561.062 813.097 558.45 815.71 558.45 818.933 cv
558.45 941.05 li
558.5 941.05 li
558.5 941 li
cp
f
558.5 50 mo
558.5 179.195 li
558.5 182.391 561.09 184.98 564.286 184.98 cv
567.481 184.98 570.071 182.391 570.071 179.195 cv
570.071 50 li
558.5 50 li
cp
f
558.5 50 mo
558.45 50 li
558.45 179.195 li
558.45 182.418 561.062 185.03 564.286 185.03 cv
567.509 185.03 570.121 182.418 570.121 179.195 cv
570.121 49.95 li
558.45 49.95 li
558.45 50 li
558.5 50 li
558.5 50.05 li
570.021 50.05 li
570.021 179.195 li
570.021 180.779 569.379 182.213 568.342 183.251 cv
567.304 184.289 565.87 184.93 564.286 184.93 cv
562.702 184.93 561.268 184.289 560.23 183.251 cv
559.192 182.213 558.55 180.779 558.55 179.195 cv
558.55 50 li
558.5 50 li
558.5 50.05 li
558.5 50 li
cp
f
571.357 941 mo
571.357 836.753 li
571.357 833.558 573.947 830.967 577.143 830.967 cv
580.338 830.967 582.929 833.558 582.929 836.753 cv
582.929 941 li
571.357 941 li
cp
.882353 .513726 .886275 rgb
f
571.357 941 mo
571.407 941 li
571.407 836.753 li
571.407 835.169 572.049 833.735 573.087 832.697 cv
574.125 831.659 575.559 831.017 577.143 831.017 cv
578.727 831.017 580.16 831.659 581.198 832.697 cv
582.237 833.735 582.879 835.169 582.879 836.753 cv
582.879 940.95 li
571.357 940.95 li
571.357 941 li
571.407 941 li
571.357 941 li
571.357 941.05 li
582.979 941.05 li
582.979 836.753 li
582.979 833.53 580.365 830.917 577.143 830.917 cv
573.92 830.917 571.307 833.53 571.307 836.753 cv
571.307 941.05 li
571.357 941.05 li
571.357 941 li
cp
f
571.357 50 mo
571.357 175.631 li
571.357 178.826 573.947 181.417 577.143 181.417 cv
580.338 181.417 582.929 178.826 582.929 175.631 cv
582.929 50 li
571.357 50 li
cp
f
571.357 50 mo
571.307 50 li
571.307 175.631 li
571.307 178.854 573.92 181.467 577.143 181.467 cv
580.365 181.467 582.979 178.854 582.979 175.631 cv
582.979 49.95 li
571.307 49.95 li
571.307 50 li
571.357 50 li
571.357 50.05 li
582.879 50.05 li
582.879 175.631 li
582.879 177.215 582.237 178.649 581.198 179.687 cv
580.16 180.725 578.727 181.367 577.143 181.367 cv
575.559 181.367 574.125 180.725 573.087 179.687 cv
572.049 178.649 571.407 177.215 571.407 175.631 cv
571.407 50 li
571.357 50 li
571.357 50.05 li
571.357 50 li
cp
f
584.214 941 mo
584.214 848.336 li
584.214 845.141 586.805 842.551 590 842.551 cv
593.195 842.551 595.786 845.141 595.786 848.336 cv
595.786 941 li
584.214 941 li
cp
.952941 .443137 .956863 rgb
f
584.214 941 mo
584.264 941 li
584.264 848.336 li
584.264 846.752 584.906 845.318 585.944 844.28 cv
586.982 843.243 588.416 842.601 590 842.601 cv
591.584 842.601 593.018 843.243 594.056 844.28 cv
595.094 845.318 595.736 846.752 595.736 848.336 cv
595.736 940.95 li
584.214 940.95 li
584.214 941 li
584.264 941 li
584.214 941 li
584.214 941.05 li
595.836 941.05 li
595.836 848.336 li
595.836 845.113 593.223 842.501 590 842.501 cv
586.777 842.501 584.164 845.113 584.164 848.336 cv
584.164 941.05 li
584.214 941.05 li
584.214 941 li
cp
f
584.214 50 mo
584.214 96.332 li
584.214 99.5273 586.805 102.118 590 102.118 cv
593.195 102.118 595.786 99.5273 595.786 96.332 cv
595.786 50 li
584.214 50 li
cp
f
584.214 50 mo
584.164 50 li
584.164 96.332 li
584.164 99.555 586.777 102.168 590 102.168 cv
593.223 102.168 595.836 99.555 595.836 96.332 cv
595.836 49.95 li
584.164 49.95 li
584.164 50 li
584.214 50 li
584.214 50.05 li
595.736 50.05 li
595.736 96.332 li
595.736 97.916 595.094 99.3496 594.056 100.388 cv
593.018 101.426 591.584 102.068 590 102.068 cv
588.416 102.068 586.982 101.426 585.944 100.388 cv
584.906 99.3496 584.264 97.916 584.264 96.332 cv
584.264 50 li
584.214 50 li
584.214 50.05 li
584.214 50 li
cp
f
597.071 941 mo
597.071 796.658 li
597.071 793.463 599.662 790.872 602.857 790.872 cv
606.053 790.872 608.643 793.463 608.643 796.658 cv
608.643 941 li
597.071 941 li
cp
.882353 .372549 .886275 rgb
f
597.071 941 mo
597.121 941 li
597.121 796.658 li
597.121 795.074 597.763 793.64 598.801 792.602 cv
599.84 791.564 601.273 790.922 602.857 790.922 cv
604.441 790.922 605.875 791.564 606.913 792.602 cv
607.951 793.64 608.593 795.074 608.593 796.658 cv
608.593 940.95 li
597.071 940.95 li
597.071 941 li
597.121 941 li
597.071 941 li
597.071 941.05 li
608.693 941.05 li
608.693 796.658 li
608.693 793.435 606.08 790.822 602.857 790.822 cv
599.634 790.822 597.021 793.435 597.021 796.658 cv
597.021 941.05 li
597.071 941.05 li
597.071 941 li
cp
f
597.071 50 mo
597.071 85.6401 li
597.071 88.8354 599.662 91.4258 602.857 91.4258 cv
606.053 91.4258 608.643 88.8354 608.643 85.6401 cv
608.643 50 li
597.071 50 li
cp
f
597.071 50 mo
597.021 50 li
597.021 85.6401 li
597.021 88.8631 599.634 91.4757 602.857 91.4758 cv
606.08 91.4757 608.693 88.8631 608.693 85.6401 cv
608.693 49.95 li
597.021 49.95 li
597.021 50 li
597.071 50 li
597.071 50.05 li
608.593 50.05 li
608.593 85.6401 li
608.593 87.2241 607.951 88.6577 606.913 89.6958 cv
605.875 90.7339 604.441 91.3757 602.857 91.3758 cv
601.273 91.3757 599.84 90.7339 598.801 89.6958 cv
597.763 88.6577 597.121 87.2241 597.121 85.6401 cv
597.121 50 li
597.071 50 li
597.071 50.05 li
597.071 50 li
cp
f
609.929 941 mo
609.929 804.677 li
609.929 801.481 612.519 798.892 615.714 798.892 cv
618.91 798.892 621.5 801.481 621.5 804.677 cv
621.5 941 li
609.929 941 li
cp
.952941 .443137 .956863 rgb
f
609.929 941 mo
609.979 941 li
609.979 804.677 li
609.979 803.093 610.62 801.659 611.658 800.621 cv
612.696 799.583 614.13 798.942 615.714 798.942 cv
617.298 798.942 618.732 799.583 619.77 800.621 cv
620.808 801.659 621.45 803.093 621.45 804.677 cv
621.45 940.95 li
609.929 940.95 li
609.929 941 li
609.979 941 li
609.929 941 li
609.929 941.05 li
621.55 941.05 li
621.55 804.677 li
621.55 801.454 618.938 798.842 615.714 798.842 cv
612.491 798.842 609.879 801.454 609.879 804.677 cv
609.879 941.05 li
609.929 941.05 li
609.929 941 li
cp
f
609.929 50 mo
609.929 109.697 li
609.929 112.893 612.519 115.483 615.714 115.483 cv
618.91 115.483 621.5 112.893 621.5 109.697 cv
621.5 50 li
609.929 50 li
cp
f
609.929 50 mo
609.879 50 li
609.879 109.697 li
609.879 112.92 612.491 115.533 615.714 115.533 cv
618.938 115.533 621.55 112.92 621.55 109.697 cv
621.55 49.95 li
609.879 49.95 li
609.879 50 li
609.929 50 li
609.929 50.05 li
621.45 50.05 li
621.45 109.697 li
621.45 111.281 620.808 112.715 619.77 113.753 cv
618.732 114.791 617.298 115.433 615.714 115.433 cv
614.13 115.433 612.696 114.791 611.658 113.753 cv
610.62 112.715 609.979 111.281 609.979 109.697 cv
609.979 50 li
609.929 50 li
609.929 50.05 li
609.929 50 li
cp
f
622.786 941 mo
622.786 816.26 li
622.786 813.064 625.376 810.475 628.571 810.475 cv
631.767 810.475 634.357 813.064 634.357 816.26 cv
634.357 941 li
622.786 941 li
cp
.882353 .513726 .886275 rgb
f
622.786 941 mo
622.836 941 li
622.836 816.26 li
622.836 814.676 623.478 813.242 624.516 812.204 cv
625.554 811.166 626.987 810.525 628.571 810.525 cv
630.155 810.525 631.589 811.166 632.627 812.204 cv
633.665 813.242 634.307 814.676 634.307 816.26 cv
634.307 940.95 li
622.786 940.95 li
622.786 941 li
622.836 941 li
622.786 941 li
622.786 941.05 li
634.407 941.05 li
634.407 816.26 li
634.407 813.037 631.794 810.425 628.571 810.425 cv
625.348 810.425 622.736 813.037 622.736 816.26 cv
622.736 941.05 li
622.786 941.05 li
622.786 941 li
cp
f
622.786 50 mo
622.786 194.342 li
622.786 197.537 625.376 200.128 628.571 200.128 cv
631.767 200.128 634.357 197.537 634.357 194.342 cv
634.357 50 li
622.786 50 li
cp
f
622.786 50 mo
622.736 50 li
622.736 194.342 li
622.736 197.565 625.348 200.178 628.571 200.178 cv
631.794 200.178 634.407 197.565 634.407 194.342 cv
634.407 49.95 li
622.736 49.95 li
622.736 50 li
622.786 50 li
622.786 50.05 li
634.307 50.05 li
634.307 194.342 li
634.307 195.926 633.665 197.36 632.627 198.398 cv
631.589 199.436 630.155 200.078 628.571 200.078 cv
626.987 200.078 625.554 199.436 624.516 198.398 cv
623.478 197.36 622.836 195.926 622.836 194.342 cv
622.836 50 li
622.786 50 li
622.786 50.05 li
622.786 50 li
cp
f
635.643 941 mo
635.643 835.862 li
635.643 832.667 638.233 830.076 641.429 830.076 cv
644.624 830.076 647.214 832.667 647.214 835.862 cv
647.214 941 li
635.643 941 li
cp
.811765 .584314 .815686 rgb
f
635.643 941 mo
635.693 941 li
635.693 835.862 li
635.693 834.278 636.335 832.845 637.373 831.806 cv
638.411 830.768 639.845 830.126 641.429 830.126 cv
643.013 830.126 644.446 830.768 645.484 831.806 cv
646.522 832.845 647.164 834.278 647.164 835.862 cv
647.164 940.95 li
635.643 940.95 li
635.643 941 li
635.693 941 li
635.643 941 li
635.643 941.05 li
647.264 941.05 li
647.264 835.862 li
647.264 832.639 644.652 830.026 641.429 830.026 cv
638.206 830.026 635.593 832.639 635.593 835.862 cv
635.593 941.05 li
635.643 941.05 li
635.643 941 li
cp
f
635.643 50 mo
635.643 188.105 li
635.643 191.3 638.233 193.891 641.429 193.891 cv
644.624 193.891 647.214 191.3 647.214 188.105 cv
647.214 50 li
635.643 50 li
cp
f
635.643 50 mo
635.593 50 li
635.593 188.105 li
635.593 191.328 638.206 193.941 641.429 193.941 cv
644.652 193.941 647.264 191.328 647.264 188.105 cv
647.264 49.95 li
635.593 49.95 li
635.593 50 li
635.643 50 li
635.643 50.05 li
647.164 50.05 li
647.164 188.105 li
647.164 189.689 646.522 191.123 645.484 192.161 cv
644.446 193.199 643.013 193.841 641.429 193.841 cv
639.845 193.841 638.411 193.199 637.373 192.161 cv
636.335 191.123 635.693 189.689 635.693 188.105 cv
635.693 50 li
635.643 50 li
635.643 50.05 li
635.643 50 li
cp
f
648.5 941 mo
648.5 807.35 li
648.5 804.154 651.09 801.564 654.286 801.564 cv
657.481 801.564 660.071 804.154 660.071 807.35 cv
660.071 941 li
648.5 941 li
cp
.741176 .654902 .886275 rgb
f
648.5 941 mo
648.55 941 li
648.55 807.35 li
648.55 805.766 649.192 804.332 650.23 803.294 cv
651.268 802.256 652.702 801.614 654.286 801.614 cv
655.87 801.614 657.304 802.256 658.342 803.294 cv
659.379 804.332 660.021 805.766 660.021 807.35 cv
660.021 940.95 li
648.5 940.95 li
648.5 941 li
648.55 941 li
648.5 941 li
648.5 941.05 li
660.121 941.05 li
660.121 807.35 li
660.121 804.127 657.509 801.514 654.286 801.514 cv
651.062 801.514 648.45 804.127 648.45 807.35 cv
648.45 941.05 li
648.5 941.05 li
648.5 941 li
cp
f
648.5 50 mo
648.5 116.825 li
648.5 120.021 651.09 122.611 654.286 122.611 cv
657.481 122.611 660.071 120.021 660.071 116.825 cv
660.071 50 li
648.5 50 li
cp
f
648.5 50 mo
648.45 50 li
648.45 116.825 li
648.45 120.048 651.062 122.661 654.286 122.661 cv
657.509 122.661 660.121 120.048 660.121 116.825 cv
660.121 49.95 li
648.45 49.95 li
648.45 50 li
648.5 50 li
648.5 50.05 li
660.021 50.05 li
660.021 116.825 li
660.021 118.409 659.379 119.843 658.342 120.881 cv
657.304 121.919 655.87 122.561 654.286 122.561 cv
652.702 122.561 651.268 121.919 650.23 120.881 cv
649.192 119.843 648.55 118.409 648.55 116.825 cv
648.55 50 li
648.5 50 li
648.5 50.05 li
648.5 50 li
cp
f
661.357 941 mo
661.357 852.791 li
661.357 849.596 663.947 847.005 667.143 847.005 cv
670.338 847.005 672.929 849.596 672.929 852.791 cv
672.929 941 li
661.357 941 li
cp
.670588 .584314 .815686 rgb
f
661.357 941 mo
661.407 941 li
661.407 852.791 li
661.407 851.207 662.049 849.773 663.087 848.735 cv
664.125 847.697 665.559 847.055 667.143 847.055 cv
668.727 847.055 670.16 847.697 671.198 848.735 cv
672.237 849.773 672.879 851.207 672.879 852.791 cv
672.879 940.95 li
661.357 940.95 li
661.357 941 li
661.407 941 li
661.357 941 li
661.357 941.05 li
672.979 941.05 li
672.979 852.791 li
672.979 849.568 670.365 846.955 667.143 846.955 cv
663.92 846.955 661.307 849.568 661.307 852.791 cv
661.307 941.05 li
661.357 941.05 li
661.357 941 li
cp
f
661.357 50 mo
661.357 184.541 li
661.357 187.736 663.947 190.327 667.143 190.327 cv
670.338 190.327 672.929 187.736 672.929 184.541 cv
672.929 50 li
661.357 50 li
cp
f
661.357 50 mo
661.307 50 li
661.307 184.541 li
661.307 187.764 663.92 190.377 667.143 190.377 cv
670.365 190.377 672.979 187.764 672.979 184.541 cv
672.979 49.95 li
661.307 49.95 li
661.307 50 li
661.357 50 li
661.357 50.05 li
672.879 50.05 li
672.879 184.541 li
672.879 186.125 672.237 187.559 671.198 188.597 cv
670.16 189.635 668.727 190.277 667.143 190.277 cv
665.559 190.277 664.125 189.635 663.087 188.597 cv
662.049 187.559 661.407 186.125 661.407 184.541 cv
661.407 50 li
661.357 50 li
661.357 50.05 li
661.357 50 li
cp
f
674.214 941 mo
674.214 799.331 li
674.214 796.136 676.805 793.545 680 793.545 cv
683.195 793.545 685.786 796.136 685.786 799.331 cv
685.786 941 li
674.214 941 li
cp
.6 .654902 .745098 rgb
f
674.214 941 mo
674.264 941 li
674.264 799.331 li
674.264 797.747 674.906 796.313 675.944 795.275 cv
676.982 794.237 678.416 793.595 680 793.595 cv
681.584 793.595 683.018 794.237 684.056 795.275 cv
685.094 796.313 685.736 797.747 685.736 799.331 cv
685.736 940.95 li
674.214 940.95 li
674.214 941 li
674.264 941 li
674.214 941 li
674.214 941.05 li
685.836 941.05 li
685.836 799.331 li
685.836 796.108 683.223 793.495 680 793.495 cv
676.777 793.495 674.164 796.108 674.164 799.331 cv
674.164 941.05 li
674.214 941.05 li
674.214 941 li
cp
f
674.214 50 mo
674.214 179.195 li
674.214 182.391 676.805 184.98 680 184.98 cv
683.195 184.98 685.786 182.391 685.786 179.195 cv
685.786 50 li
674.214 50 li
cp
f
674.214 50 mo
674.164 50 li
674.164 179.195 li
674.164 182.418 676.777 185.03 680 185.03 cv
683.223 185.03 685.836 182.418 685.836 179.195 cv
685.836 49.95 li
674.164 49.95 li
674.164 50 li
674.214 50 li
674.214 50.05 li
685.736 50.05 li
685.736 179.195 li
685.736 180.779 685.094 182.213 684.056 183.251 cv
683.018 184.289 681.584 184.93 680 184.93 cv
678.416 184.93 676.982 184.289 675.944 183.251 cv
674.906 182.213 674.264 180.779 674.264 179.195 cv
674.264 50 li
674.214 50 li
674.214 50.05 li
674.214 50 li
cp
f
687.071 941 mo
687.071 886.649 li
687.071 883.453 689.662 880.863 692.857 880.863 cv
696.053 880.863 698.643 883.453 698.643 886.649 cv
698.643 941 li
687.071 941 li
cp
.670588 .72549 .815686 rgb
f
687.071 941 mo
687.121 941 li
687.121 886.649 li
687.121 885.065 687.763 883.631 688.801 882.593 cv
689.84 881.555 691.273 880.913 692.857 880.913 cv
694.441 880.913 695.875 881.555 696.913 882.593 cv
697.951 883.631 698.593 885.065 698.593 886.649 cv
698.593 940.95 li
687.071 940.95 li
687.071 941 li
687.121 941 li
687.071 941 li
687.071 941.05 li
698.693 941.05 li
698.693 886.649 li
698.693 883.425 696.08 880.813 692.857 880.813 cv
689.634 880.813 687.021 883.425 687.021 886.649 cv
687.021 941.05 li
687.071 941.05 li
687.071 941 li
cp
f
687.071 50 mo
687.071 187.214 li
687.071 190.409 689.662 193 692.857 193 cv
696.053 193 698.643 190.409 698.643 187.214 cv
698.643 50 li
687.071 50 li
cp
f
687.071 50 mo
687.021 50 li
687.021 187.214 li
687.021 190.437 689.634 193.05 692.857 193.05 cv
696.08 193.05 698.693 190.437 698.693 187.214 cv
698.693 49.95 li
687.021 49.95 li
687.021 50 li
687.071 50 li
687.071 50.05 li
698.593 50.05 li
698.593 187.214 li
698.593 188.798 697.951 190.232 696.913 191.27 cv
695.875 192.308 694.441 192.95 692.857 192.95 cv
691.273 192.95 689.84 192.308 688.801 191.27 cv
687.763 190.232 687.121 188.798 687.121 187.214 cv
687.121 50 li
687.071 50 li
687.071 50.05 li
687.071 50 li
cp
f
699.929 941 mo
699.929 821.606 li
699.929 818.41 702.519 815.82 705.714 815.82 cv
708.91 815.82 711.5 818.41 711.5 821.606 cv
711.5 941 li
699.929 941 li
cp
.741176 .654902 .886275 rgb
f
699.929 941 mo
699.979 941 li
699.979 821.606 li
699.979 820.022 700.62 818.588 701.658 817.55 cv
702.696 816.512 704.13 815.87 705.714 815.87 cv
707.298 815.87 708.732 816.512 709.77 817.55 cv
710.808 818.588 711.45 820.022 711.45 821.606 cv
711.45 940.95 li
699.929 940.95 li
699.929 941 li
699.979 941 li
699.929 941 li
699.929 941.05 li
711.55 941.05 li
711.55 821.606 li
711.55 818.383 708.938 815.77 705.714 815.77 cv
702.491 815.77 699.879 818.383 699.879 821.606 cv
699.879 941.05 li
699.929 941.05 li
699.929 941 li
cp
f
699.929 50 mo
699.929 115.043 li
699.929 118.238 702.519 120.829 705.714 120.829 cv
708.91 120.829 711.5 118.238 711.5 115.043 cv
711.5 50 li
699.929 50 li
cp
f
699.929 50 mo
699.879 50 li
699.879 115.043 li
699.879 118.266 702.491 120.879 705.714 120.879 cv
708.938 120.879 711.55 118.266 711.55 115.043 cv
711.55 49.95 li
699.879 49.95 li
699.879 50 li
699.929 50 li
699.929 50.05 li
711.45 50.05 li
711.45 115.043 li
711.45 116.627 710.808 118.061 709.77 119.099 cv
708.732 120.137 707.298 120.779 705.714 120.779 cv
704.13 120.779 702.696 120.137 701.658 119.099 cv
700.62 118.061 699.979 116.627 699.979 115.043 cv
699.979 50 li
699.929 50 li
699.929 50.05 li
699.929 50 li
cp
f
712.786 941 mo
712.786 846.554 li
712.786 843.358 715.376 840.769 718.571 840.769 cv
721.767 840.769 724.357 843.358 724.357 846.554 cv
724.357 941 li
712.786 941 li
cp
.670588 .72549 .815686 rgb
f
712.786 941 mo
712.836 941 li
712.836 846.554 li
712.836 844.97 713.478 843.536 714.516 842.498 cv
715.554 841.46 716.987 840.819 718.571 840.819 cv
720.155 840.819 721.589 841.46 722.627 842.498 cv
723.665 843.536 724.307 844.97 724.307 846.554 cv
724.307 940.95 li
712.786 940.95 li
712.786 941 li
712.836 941 li
712.786 941 li
712.786 941.05 li
724.407 941.05 li
724.407 846.554 li
724.407 843.331 721.794 840.719 718.571 840.719 cv
715.348 840.719 712.736 843.331 712.736 846.554 cv
712.736 941.05 li
712.786 941.05 li
712.786 941 li
cp
f
712.786 50 mo
712.786 166.721 li
712.786 169.917 715.376 172.507 718.571 172.507 cv
721.767 172.507 724.357 169.917 724.357 166.721 cv
724.357 50 li
712.786 50 li
cp
f
712.786 50 mo
712.736 50 li
712.736 166.721 li
712.736 169.944 715.348 172.557 718.571 172.557 cv
721.794 172.557 724.407 169.944 724.407 166.721 cv
724.407 49.95 li
712.736 49.95 li
712.736 50 li
712.786 50 li
712.786 50.05 li
724.307 50.05 li
724.307 166.721 li
724.307 168.305 723.665 169.739 722.627 170.777 cv
721.589 171.815 720.155 172.457 718.571 172.457 cv
716.987 172.457 715.554 171.815 714.516 170.777 cv
713.478 169.739 712.836 168.305 712.836 166.721 cv
712.836 50 li
712.786 50 li
712.786 50.05 li
712.786 50 li
cp
f
725.643 941 mo
725.643 904.469 li
725.643 901.273 728.233 898.684 731.429 898.684 cv
734.624 898.684 737.214 901.273 737.214 904.469 cv
737.214 941 li
725.643 941 li
cp
.741176 .796078 .886275 rgb
f
725.643 941 mo
725.693 941 li
725.693 904.469 li
725.693 902.885 726.335 901.451 727.373 900.413 cv
728.411 899.375 729.845 898.734 731.429 898.734 cv
733.013 898.734 734.446 899.375 735.484 900.413 cv
736.522 901.451 737.164 902.885 737.164 904.469 cv
737.164 940.95 li
725.643 940.95 li
725.643 941 li
725.693 941 li
725.643 941 li
725.643 941.05 li
737.264 941.05 li
737.264 904.469 li
737.264 901.246 734.652 898.634 731.429 898.634 cv
728.206 898.634 725.593 901.246 725.593 904.469 cv
725.593 941.05 li
725.643 941.05 li
725.643 941 li
cp
f
725.643 50 mo
725.643 131.081 li
725.643 134.276 728.233 136.867 731.429 136.867 cv
734.624 136.867 737.214 134.276 737.214 131.081 cv
737.214 50 li
725.643 50 li
cp
f
725.643 50 mo
725.593 50 li
725.593 131.081 li
725.593 134.304 728.206 136.917 731.429 136.917 cv
734.652 136.917 737.264 134.304 737.264 131.081 cv
737.264 49.95 li
725.593 49.95 li
725.593 50 li
725.643 50 li
725.643 50.05 li
737.164 50.05 li
737.164 131.081 li
737.164 132.665 736.522 134.099 735.484 135.137 cv
734.446 136.175 733.013 136.817 731.429 136.817 cv
729.845 136.817 728.411 136.175 727.373 135.137 cv
726.335 134.099 725.693 132.665 725.693 131.081 cv
725.693 50 li
725.643 50 li
725.643 50.05 li
725.643 50 li
cp
f
738.5 941 mo
738.5 881.303 li
738.5 878.107 741.09 875.518 744.286 875.518 cv
747.481 875.518 750.071 878.107 750.071 881.303 cv
750.071 941 li
738.5 941 li
cp
.811765 .866667 .815686 rgb
f
738.5 941 mo
738.55 941 li
738.55 881.303 li
738.55 879.719 739.192 878.285 740.23 877.247 cv
741.268 876.209 742.702 875.568 744.286 875.568 cv
745.87 875.568 747.304 876.209 748.342 877.247 cv
749.379 878.285 750.021 879.719 750.021 881.303 cv
750.021 940.95 li
738.5 940.95 li
738.5 941 li
738.55 941 li
738.5 941 li
738.5 941.05 li
750.121 941.05 li
750.121 881.303 li
750.121 878.08 747.509 875.468 744.286 875.468 cv
741.062 875.468 738.45 878.08 738.45 881.303 cv
738.45 941.05 li
738.5 941.05 li
738.5 941 li
cp
f
738.5 50 mo
738.5 93.6592 li
738.5 96.8545 741.09 99.4448 744.286 99.4448 cv
747.481 99.4448 750.071 96.8545 750.071 93.6592 cv
750.071 50 li
738.5 50 li
cp
f
738.5 50 mo
738.45 50 li
738.45 93.6592 li
738.45 96.8821 741.062 99.4948 744.286 99.4948 cv
747.509 99.4948 750.121 96.8821 750.121 93.6592 cv
750.121 49.95 li
738.45 49.95 li
738.45 50 li
738.5 50 li
738.5 50.05 li
750.021 50.05 li
750.021 93.6592 li
750.021 95.2432 749.379 96.6768 748.342 97.7149 cv
747.304 98.7529 745.87 99.3948 744.286 99.3948 cv
742.702 99.3948 741.268 98.7529 740.23 97.7149 cv
739.192 96.6768 738.55 95.2432 738.55 93.6592 cv
738.55 50 li
738.5 50 li
738.5 50.05 li
738.5 50 li
cp
f
751.357 941 mo
751.357 839.426 li
751.357 836.23 753.947 833.641 757.143 833.641 cv
760.338 833.641 762.929 836.23 762.929 839.426 cv
762.929 941 li
751.357 941 li
cp
.741176 .796078 .886275 rgb
f
751.357 941 mo
751.407 941 li
751.407 839.426 li
751.407 837.842 752.049 836.408 753.087 835.37 cv
754.125 834.332 755.559 833.691 757.143 833.691 cv
758.727 833.691 760.16 834.332 761.198 835.37 cv
762.237 836.408 762.879 837.842 762.879 839.426 cv
762.879 940.95 li
751.357 940.95 li
751.357 941 li
751.407 941 li
751.357 941 li
751.357 941.05 li
762.979 941.05 li
762.979 839.426 li
762.979 836.203 760.365 833.591 757.143 833.591 cv
753.92 833.591 751.307 836.203 751.307 839.426 cv
751.307 941.05 li
751.357 941.05 li
751.357 941 li
cp
f
751.357 50 mo
751.357 198.797 li
751.357 201.992 753.947 204.583 757.143 204.583 cv
760.338 204.583 762.929 201.992 762.929 198.797 cv
762.929 50 li
751.357 50 li
cp
f
751.357 50 mo
751.307 50 li
751.307 198.797 li
751.307 202.02 753.92 204.632 757.143 204.633 cv
760.365 204.632 762.979 202.02 762.979 198.797 cv
762.979 49.95 li
751.307 49.95 li
751.307 50 li
751.357 50 li
751.357 50.05 li
762.879 50.05 li
762.879 198.797 li
762.879 200.381 762.237 201.814 761.198 202.853 cv
760.16 203.891 758.727 204.532 757.143 204.533 cv
755.559 204.532 754.125 203.891 753.087 202.853 cv
752.049 201.814 751.407 200.381 751.407 198.797 cv
751.407 50 li
751.357 50 li
751.357 50.05 li
751.357 50 li
cp
f
764.214 941 mo
764.214 902.688 li
764.214 899.491 766.805 896.901 770 896.901 cv
773.195 896.901 775.786 899.491 775.786 902.688 cv
775.786 941 li
764.214 941 li
cp
.811765 .866667 .815686 rgb
f
764.214 941 mo
764.264 941 li
764.264 902.688 li
764.264 901.103 764.906 899.669 765.944 898.631 cv
766.982 897.593 768.416 896.951 770 896.951 cv
771.584 896.951 773.018 897.593 774.056 898.631 cv
775.094 899.669 775.736 901.103 775.736 902.688 cv
775.736 940.95 li
764.214 940.95 li
764.214 941 li
764.264 941 li
764.214 941 li
764.214 941.05 li
775.836 941.05 li
775.836 902.688 li
775.836 899.464 773.223 896.851 770 896.851 cv
766.777 896.851 764.164 899.464 764.164 902.688 cv
764.164 941.05 li
764.214 941.05 li
764.214 941 li
cp
f
764.214 50 mo
764.214 175.631 li
764.214 178.826 766.805 181.417 770 181.417 cv
773.195 181.417 775.786 178.826 775.786 175.631 cv
775.786 50 li
764.214 50 li
cp
f
764.214 50 mo
764.164 50 li
764.164 175.631 li
764.164 178.854 766.777 181.466 770 181.466 cv
773.223 181.466 775.836 178.854 775.836 175.631 cv
775.836 49.95 li
764.164 49.95 li
764.164 50 li
764.214 50 li
764.214 50.05 li
775.736 50.05 li
775.736 175.631 li
775.736 177.215 775.094 178.648 774.056 179.687 cv
773.018 180.725 771.584 181.366 770 181.367 cv
768.416 181.366 766.982 180.725 765.944 179.687 cv
764.906 178.648 764.264 177.215 764.264 175.631 cv
764.264 50 li
764.214 50 li
764.214 50.05 li
764.214 50 li
cp
f
777.071 941 mo
777.071 894.668 li
777.071 891.473 779.662 888.882 782.857 888.882 cv
786.053 888.882 788.643 891.473 788.643 894.668 cv
788.643 941 li
777.071 941 li
cp
.741176 .796078 .745098 rgb
f
777.071 941 mo
777.121 941 li
777.121 894.668 li
777.121 893.084 777.763 891.65 778.801 890.612 cv
779.84 889.574 781.273 888.932 782.857 888.932 cv
784.441 888.932 785.875 889.574 786.913 890.612 cv
787.951 891.65 788.593 893.084 788.593 894.668 cv
788.593 940.95 li
777.071 940.95 li
777.071 941 li
777.121 941 li
777.071 941 li
777.071 941.05 li
788.693 941.05 li
788.693 894.668 li
788.693 891.445 786.08 888.832 782.857 888.832 cv
779.634 888.832 777.021 891.445 777.021 894.668 cv
777.021 941.05 li
777.071 941.05 li
777.071 941 li
cp
f
777.071 50 mo
777.071 168.503 li
777.071 171.698 779.662 174.289 782.857 174.289 cv
786.053 174.289 788.643 171.698 788.643 168.503 cv
788.643 50 li
777.071 50 li
cp
f
777.071 50 mo
777.021 50 li
777.021 168.503 li
777.021 171.726 779.634 174.339 782.857 174.339 cv
786.08 174.339 788.693 171.726 788.693 168.503 cv
788.693 49.95 li
777.021 49.95 li
777.021 50 li
777.071 50 li
777.071 50.05 li
788.593 50.05 li
788.593 168.503 li
788.593 170.087 787.951 171.521 786.913 172.559 cv
785.875 173.597 784.441 174.239 782.857 174.239 cv
781.273 174.239 779.84 173.597 778.801 172.559 cv
777.763 171.521 777.121 170.087 777.121 168.503 cv
777.121 50 li
777.071 50 li
777.071 50.05 li
777.071 50 li
cp
f
789.929 941 mo
789.929 820.715 li
789.929 817.52 792.519 814.93 795.714 814.93 cv
798.91 814.93 801.5 817.52 801.5 820.715 cv
801.5 941 li
789.929 941 li
cp
.670588 .72549 .67451 rgb
f
789.929 941 mo
789.979 941 li
789.979 820.715 li
789.979 819.131 790.62 817.697 791.658 816.659 cv
792.696 815.621 794.13 814.98 795.714 814.98 cv
797.298 814.98 798.732 815.621 799.77 816.659 cv
800.808 817.697 801.45 819.131 801.45 820.715 cv
801.45 940.95 li
789.929 940.95 li
789.929 941 li
789.979 941 li
789.929 941 li
789.929 941.05 li
801.55 941.05 li
801.55 820.715 li
801.55 817.492 798.938 814.88 795.714 814.88 cv
792.491 814.88 789.879 817.492 789.879 820.715 cv
789.879 941.05 li
789.929 941.05 li
789.929 941 li
cp
f
789.929 50 mo
789.929 144.446 li
789.929 147.642 792.519 150.231 795.714 150.231 cv
798.91 150.231 801.5 147.642 801.5 144.446 cv
801.5 50 li
789.929 50 li
cp
f
789.929 50 mo
789.879 50 li
789.879 144.446 li
789.879 147.669 792.491 150.281 795.714 150.281 cv
798.938 150.281 801.55 147.669 801.55 144.446 cv
801.55 49.95 li
789.879 49.95 li
789.879 50 li
789.929 50 li
789.929 50.05 li
801.45 50.05 li
801.45 144.446 li
801.45 146.03 800.808 147.464 799.77 148.502 cv
798.732 149.54 797.298 150.181 795.714 150.181 cv
794.13 150.181 792.696 149.54 791.658 148.502 cv
790.62 147.464 789.979 146.03 789.979 144.446 cv
789.979 50 li
789.929 50 li
789.929 50.05 li
789.929 50 li
cp
f
802.786 941 mo
802.786 861.701 li
802.786 858.506 805.376 855.915 808.571 855.915 cv
811.767 855.915 814.357 858.506 814.357 861.701 cv
814.357 941 li
802.786 941 li
cp
.741176 .796078 .745098 rgb
f
802.786 941 mo
802.836 941 li
802.836 861.701 li
802.836 860.117 803.478 858.683 804.516 857.645 cv
805.554 856.607 806.987 855.965 808.571 855.965 cv
810.155 855.965 811.589 856.607 812.627 857.645 cv
813.665 858.683 814.307 860.117 814.307 861.701 cv
814.307 940.95 li
802.786 940.95 li
802.786 941 li
802.836 941 li
802.786 941 li
802.786 941.05 li
814.407 941.05 li
814.407 861.701 li
814.407 858.478 811.794 855.865 808.571 855.865 cv
805.348 855.865 802.736 858.478 802.736 861.701 cv
802.736 941.05 li
802.786 941.05 li
802.786 941 li
cp
f
802.786 50 mo
802.786 130.19 li
802.786 133.385 805.376 135.976 808.571 135.976 cv
811.767 135.976 814.357 133.385 814.357 130.19 cv
814.357 50 li
802.786 50 li
cp
f
802.786 50 mo
802.736 50 li
802.736 130.19 li
802.736 133.413 805.348 136.026 808.571 136.026 cv
811.794 136.026 814.407 133.413 814.407 130.19 cv
814.407 49.95 li
802.736 49.95 li
802.736 50 li
802.786 50 li
802.786 50.05 li
814.307 50.05 li
814.307 130.19 li
814.307 131.774 813.665 133.208 812.627 134.246 cv
811.589 135.284 810.155 135.926 808.571 135.926 cv
806.987 135.926 805.554 135.284 804.516 134.246 cv
803.478 133.208 802.836 131.774 802.836 130.19 cv
802.836 50 li
802.786 50 li
802.786 50.05 li
802.786 50 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 16.0.0
%%For: (Zydd) ()
%%Title: (gm_bcgr_lin_003_062_page.eps)
%%CreationDate: 8/31/2017 12:14 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"07Bj2Ouc2`/Tch$3^F@%+OVYB?[6G0XmYV1R3(qVL,Dt,S=GsC*AI\kc1Yuq]\B$PhMnJU>P<DlDb;G$0=lH..aHdJeD>IA;E
%mj2J[$9e/o\jg*(7M(`,InWV?fCu%H'$X-J6jN\t9Fq/XI`b%MI(M.I7]lZ-[p=i:]j/1sme2s*gs:#afIke6Qa6-5C,FXo);.Ki
%nc3M^)r=T"hM@'VDR8+Wr00d(c4t2De:Ude!5DGl\_:]ukTK0bTgq?ed3n\?Z8tX/da.R]IT3BBqV?2,hJQWC+DPN+B;?'4:7;%\
%`0Lf>51B"rOcOD'K1;L'1_^^QmEZV?@a<Wj+J_M3q7t(Kbt\2BfI)a\nQE*crsJ/`2uIP4No;`W]=W@L@5A&D1gCQ?[Wqu@&Hd\[
%dnZVA&#3a7;=6qrg`./1-hPBm!X1F,L=Lrs`;b5.K"iS<l%gOD)V!usHM#gPYo]12;4!>LVV=>6ru[2^AXXtE_gg;\1nsD8X54(=
%fb>2W`G`5d;$6;&JRYBJLJj=nroFuPj_c[8K-@ZB"4[2\R%=$>l_%B1s,>=I/C%e('=A>)a0_lTSf&G4i6d*rHmA93_tFrQr,0?s
%C<-NTUk%h9ANCQL_<c?Voif&:,e?IJf"1OSZ:/4A!W,6rT*ht*6Lc/d--4m17kN,*bJ),9CK>;L[L\I8TiK@FS#H<-?=q$F>@?`U
%G)cO%0'I4=@aO(C:r(W52DhAAORTkH^9ZXJX51bqIU)3I#G$k*D>W-2e!XtJ-8LUV9#'29!Nd8%2tq8G@nb>hB,l*<'qbTZ&gp\^
%G@mEi#]b)5KDc-okp?7SMuUMe4\SB8%#P%;(0Z2WNHRf:/0X+UeMo"%4"hbkgF0PR?%`,!Bp\+7_CoIsRA-il0-Ud)dfCcB7MI5d
%iX#bTV\cTfp[>na7]gE$;J2>Qc84BO807\FhR"6p?;hKd+nGL<He4=iXdp6nAp;V61Ci1,L/J.Ai'42,me0eQIgm'J4H'==q!TN#
%.lSC>>.<:tX&k&'+7d$S1nsAqXJeIn5)a"L-ct^pMglB^@75fa*Lu#CC&K=&_-c;QjUU(h9t/o[8'fCJ*8]Fr$Plq+?r6;^C:r9F
%%L-I`_-OU(@)OU2R#8%j"Ug!t!%]\6qnk=t/U`1Pl^"So=C7AQl(_:[g]Yr1iul5D3l@UIjN1H[rGhi)%l6X:e$eb(:I79bfJh9f
%D>Y0<Q4MB%.K8cSP?6G?hU2rE%FNJZc$2Wa)]jtiYU(oZ=0HM/mCe\;0CiSBZ?`9pU"u&Mg_m,3kC4EM/WDt)JmL5@aNuXbYq]C,
%pIFG``t(`YK_W;UQjn+FSpq+:.;$e_"Wn[I%fNp,nM3:U#^c^KK`#bUah7KqPK@A"-O1_)EL$)<"]>cQ^k.Uf3:Lni0C[p6"MbqE
%B7jHN%gqeTL*lq&Ta`(kFQ%kcoF[A^')4^fZ*17<"j+e4KEUcNZ#_0`E[2/;i3)UZ.=]nN`?0GWIGheHr;]$Ih@IHCp2'ka13V6o
%gBG4Q=H;dYNp$0[>fOlHH)KShY2q^Ik7V0gFn9Lu1HjK64l6W4m9)+2'n+97IFj8(#*b8?F+/\-`$UY.T*JI6IK?57M=:<_?ou`T
%L6e]<oEmi0#IH6O1%5Iqp4.btHn<TcMf&Rjk2;GW@11lkAeoB7k`ZB;ZX$5p.?*?[)Es[L$d"1L`AQcP=N'iiYMf*_0AmN-&lChI
%kCHd\,KHGXfq`g/5f]"[hfY!rd&@l[D^ta).fO?9Nccf]M&`-:.YR.I/-tou2Bj9Y\CG?oeY6-b&kq)%?<b%/0c%O@'K5(SkFg\u
%1a7ce)E[^aYG@_T&[MH-JDrD<%7GL.oI!s^_RFlBr<;I@[Z0kde#:!5++Z!)!PW'+-2l$Ur\,+]Vtbt'"ffq&H<r\Fj[KB0!#&l:
%k2lP:egm^(:B(h^QRl\8<oC`olAam#\j7eHdFc5s(7CloU.n`:qiOkfOOX:Ti'8h"*Q<SR=qi1PjaJ),Gu4RgDXar<61pJS58djt
%eZ)@A+0/8fY@)__I:,m(PjEY^.bAN]ZL,D&^WiE367Xj'Z6nR(U&e:!o`g>PgSM+@C,DY$bJs23bsi'P(*Gd,eo(ckW$e$G]%o-^
%qp1?A',M+]E`[0Y]2=JrfuE"UN/7BLs7CeMU<9i)e`pH==ml!L26H/RJ!M#UM2X[k7Nc.K_!uYfHL]2YH<&eNl"q7&-(4n#*^ot1
%<$s=qQ]=7),Q;go>OC"?Y/^Z^ZmuYaogM1Se8ZDGmjl8$=qND,l[&B(&\Vji]OZ-an\I_n:`8p%mH,A!Kn"f@YB,+bJ%f/[`-moI
%^T!&Bou\-&iDL,Fk2hp*T9qS07de$l5Q;2s25>W2$6qH`c@isgR>EDSmTq^R2!k%3e(aDP`Vlaj0W$qnW`Ts/@kl_U"0>Yn4X`0C
%=Kg3A-h5?=\sQ)X9_W;"T&MGjK.?7X=7n/O@:TT@[]s3-ocq+fR\U;\Y[n(@N/&1M>O=`6W3I9H:Z9lOD7mc)gu.!OH?V9(*?(Jh
%-gDV`H?7H+ksN<m&>e1LhmCS_W_pSOoEf_r#`s>=HCZgMDriA=X'PsU;@_#rm9h1s_hR"W?Ar+S7ad*a7IJ=[*Kk-W)i\UsI<ZN/
%n&)KQWXfkG8L1<,:3,IITB4p\;O8+;b2$sbMn4C-`aSL`TADRXhp`V<r_GD9S0/rtKSSFH2bN14D1MBCGM=-P.6;b'\7OD'^]6EI
%;>\\<gVF"c=>JG8,SRj_QQ#5-TCdTIEDpb>>ErVpk\Vf/H3\PEcMqh09b$j=Ladbd*EDEXVP1G=>\K=JR"Rn"Qg1PgBHaG<R:8eK
%^hcNS4#t:4NZH)o2f[&DPFY"S"7tlI7amZqJlGS4ksK'X3+t-:?]Ut"&%</D`Q[iRa[Wn5O*a<up?T,uIc9b0nl/C-Q_N4omPO@8
%)4m,a1j2#K"trG1WE8t@6X5R6U>UnIoi>Vq_*D@`g?Wt;%l3@qZ$d(n$ou$&*jr'^2c)o=h5s/s+^Wr+r7^SZJ!ZBc,b.*cY'AA]
%iCEOT>>_kpQrNQJZ/+[eWeF$BGZoRWI0$o`],^qfH`\>Fa<0OX%MaMJ<i)qoCKLI$CG&eGoL@)pW61'!fX(Ddk!u9)HgKV"Lo#9+
%R.Ds3[1)eC)u1;r;qlg[mA[W6+*(TdENCrUek0]5Ki!XeoGos[48*0uit:\h2mn:#VA;N\<5qRq4(gNHV2K.oPEASN\JXa0dWrRF
%W>0Re?D/shISO1-jpUk$OIoTV*,gMM(t&dl`[O)TE:iXqeQ+2`;/ajiUYVuoWUu\k:qBt4l-A::q^0jEV%M^Q>-_Y!n;qe'd<Gkt
%pJC>6J=mF03M+1T7NbGZ_Cg#(6%p.BEuLf"&OFHQU_.INWYc7+:skd")r,+9TQ4D<kZIY0=AMe_Lm$+dkonmLoc'k[UIBM[oe`0k
%U2rFKk^NZC;f1M8e(2]hdA]<&Q.75rk--T-FLiI\$,256q2-"&Hj^GcP)+U%$T&/[U>>(W^,ZP$NZ0uW%>ZK?L=pKhT'mgim:uQk
%kU/a3C%mmMVST:Jhc,T)T16O&ThflcH"$SNb\99';+^%h1tM7JA&R*1\%V!N]XoHGUN*2F1m*+(.o`9M^"1VuC\t*AIY58KStek3
%gUHiF1-ulH5'f0\IT(tcUE*9\4<BF9kb`;K5(caI[p[kcQuG89#GTA;iWc"sGRCuc9sqTX6W7(I.*Pmt8akBhrt@-_#W0+H`Ma6N
%#0OHAHJ/E\P,R&:k")jcV;-kP[:^*OHq)OjV:2C@I)8$$Ue7]^Ub)[H+4=-%i\3\k(pHK?o)a&R`2<b%e=$oIW.d[H-f$JNoe;JV
%dXWbbF4]-aGQJ[4^0g?0.?q-OToKV&_8Bb"Q1.5[]*dO[02JG!mQ?8W&PjF5p#khUg>1h&q-ooTVVLQ%21S:-E.cK?0JVq.0%Y0c
%qE!Yt6uSC'&%tA,?@]/[GL%N"4W-/=DHm'=[IK4M@n<0YD7fJ:lU/>Ai'u!`B@pnj5hnT!VnuP$\Z'(hpXGl1;QZlu`Zi@M=;[u(
%.araaL(Fr_T%5^I)A^aO9*'hF3C)reiR:<E;qaR>W/lXe(A(De@jo"n)B%]7s6c]BeM"r_`Y["5h.6>;QDoV4efLNF5ig+`<dtuF
%[L/-s?_0Q;"n-0.=Ign]1XH`$m7ualO$bXJ:CTP-W"*.";(!8G'7iEoe9f#h6.'QTXiaS^_N9!`0+DN<cR<\AeWRBQSj7W\A#M6W
%-u/T,Fc\@RU)QZ%+aL.-hkpu[G':XH(k:871:&=GFaE[=/>*+kbd$H8VlYhT@YNl8oB2;<R)3\6n"*7-=hm%68j'R.`3P493:7X_
%:bN\25NkQ3FsW'5_c,fYBW3B.H<nKg<UJW=hbdlBlJ=uC1KMM-74,8SO$:b,lIo$7Z<=4@<c.>?+`'U9-9Q#XkJaGWY@beC]muSY
%+/R;d?s0/S.6jgHnJ^Ki/9'q^aCLhi=VsA:Q&"/_3%4eED*q?0mkgb4UAFC">,K\,Lp21Kh1U$M-XYpL3t2/Cm(qRi20?0Q,G#4m
%l["6&CQ1BDG!fpt>8K_pbX$,V,Ok8$"ZIphYO7aJWUmZcPL#kebGXs$cIC-+2VhYShC[8]ml-0nkGLQ+lK)"6UOTXWn0aOM7r,0[
%m['cupJ9Q.m[un("a`=uZs7gl1jf&qHu7a<QsRL#c)+S)42#`Sb?b<0l/g@jY/&cXB5?g[V=]Wa*TZLX="F)Gl;R'^Y>Y$40I6JR
%j:XIWlf[^iZL6D_I&>RLog$e#]=Cpk@Sk:\+&B3:NDCq;-@]fKh@-7SObC4)GjkQWjtN,_*mI^*>ImA/4;9Hs9>+;G/jDQ\-r-sG
%Dh/AJ=7Q-%B99mA3$HsE\oG<'S%\.Nm`:e2e&_2]^1*@VUfY9X3am]7e%OOJmBR2YVLISbWZ1E5$c2e^be_.aMfn$d>TEg6n:#\d
%;Q+hee%%R7C3_*]ktK?5^Wp34V/r8hMRdCS]6_+MEOT2PPTTC!IBINn\mqfnF0SEMooI]toukTp[P@U>dmA9Hq]JfuR/2@8bbURa
%mi5`q0-=Ps1Teftk1o.ej[IVqrjbeF@dhmiF=S<]gr#:$8QPDO]joD/q%Sr)a/goDF,OTHA8D)6oYQ!?D33R#PMo_[17d0%R5cY>
%LE>l!c#9-L'<<D1^78CfY+@<"2\R!lmV6MM6sB7r-ZE25r=a[aKrS>$50Wd0gd$q$-.BGmfZl.9=/LlDkK^Z[`lB/R.2@^ACs8@Z
%)_Sgk>:m#ID_!2h/V]me03g;Jp,@=#/GR_b>?ri)g\EM1c^`A(kEY/orRX\'R^0t!D^XiW2Lq(KP[1dq?*L1jmitlo;OI2BS%k]_
%c:>Q$Y(,Tk=#,R,qmlXlims/W\bt]%f"X6!$[3soO"rf-lu)grT`-27j'i=e]$@nE%^26dci!'2iQ@TNcFTpASRVTtj=46GpD907
%S!16hmWR._*Ni]^Z<qH!L;C]ek#Q)l1qQc3cW%B@G(d$O'L3>qG>`d/?]N;oQq49,:eiYcp-3't2uA6J_BkGIBgN6JC%o:`FT=42
%-\n1=$YS#3RXMm?-#XR6V]BLW/(Z;j4P7aAr*6ZN?7*]CY$?Bo`F(Ckq/Y(+:d(L/\uIY]CRM4tMqZFu>\ElD3.8E(b*X]7BD0Qi
%b8&Tl\46D4IM`ftV`HWE4+I:(0NUj]Q+b$spsu=fk+GO>6VYJbC/0>!'/R2Q?(jcS.nBISEb:pha'j2*E?$5&@BHafIhN;2QLH'O
%aoS!UiHB>RSBYf9c^):.%-oQ8eaV/(O^"28"l$E9h!N/Ee))b&lo(/fH1/tK>@"k\D9tm3OK3D+/EAsWobVe3WUED]lc8U]COYfb
%1Rl)H=.@l4laWKG]K?&t1q)NlJPKXfrREMq/WfSJrpAMhBQc+qp#eqkgi^p'Da1B$d,4O;F,>V2drjWsJ]$'XTi4Y:5+eRa^Wt`H
%G:/fRa\"4H2jN&\4DtAsNJ/,4h:0#dC_T3_dp1!Y9R#d@Pr3>\F7j2CZXmDoYdS5JgG3[OL$?oJ:=RFMp_=6a\kd(f_<Beh6?#)s
%][==ps';&^ZIY[gSiO=;bjf&Xb]S5C4dQ57lXTDhV5^P=2RpmL$k?S9.n)q"#*<H.>?RD(6`*Z/`G[86G&f0$[`T9GB)au1DG<%t
%n>D^4\#a>!IG=\n3J;=KWrOZJFdQ1PdMBnn7kO=u>LU!MBR(-GB#7j)Lc6+i(a2AN;Zs`dqs`u:cVQTALU3*`6nFl?A^ejNBkZ=h
%/N+]NH/9Rm-gVkM!hH!#R&#rlG&&FO^gNZNQ&Drak"./H:+*T<<k*<bkVFl2EW/CB^=hCH!N`%LnE2p/CQn=]^.\o'Y3]jp?n+>:
%oMn_ubUDQsS+pY++5bZ[7UdVW)uKT&ckgehj.EL^<Q-f3nC/a?)JVIWqJdlP8b8*RTe`ijJgC@RG)<Xna(C!M4CK1Amn:5sb$H.T
%MuGup%+?"+QRY@97$AOOL[(-CLaG"2Ti,&lE+m0-8fI6fBX<s1I(gNZMY%b;doA;Ee<%Y)QDkBd142p<YURJ&-8rbeTURFmFjJ)4
%&RMO+B8qX\rKIVd=dg=YeVMJj>4.`9OU_a8Qmn$?C#hJ<mtbm],SYpRqWW>h-Ci=#*cJHDktf\Mj8l`u^4(a'(9F+8;Xo)1gJ[S?
%C^QLd1V-]r6j0a`&`T5V6i(?QW0XJk?DS$pLEBH2D:;r&YJ3.[h9f_p\J(G"@($isG\C1M[=t#%/100.R/*m#]i[I1:8Eq89o$9k
%_>[SdC[4Jk(Fa\GAbK@(Sb0a0pBH9)7_3<Qg!%jn@d0rH\6<%F0"-tY/q00JLICgF;lIn^/nY'-HU1:VXmAb6+3bSP<QIT2W6IW,
%FMjl[n%k$Mh<C%*jKFpNLQ,d?QA'1:#b8KQCn\PP^&L6J*Q%ja@X7G/GES:/A1f]hqT\*_"dt8S#Gn+HTPuHeNb-:u%k<2<)QE-c
%+,?W5#9GdoDJ!U9X&PodrVnM?T_Z%;\CSFX\$Gu\i%T59h+OBdB(mW*qD;/02qKT96reQ56EPafhb)uhmR^Pq%MK@P*Zou-CRlG(
%8r&h*UFe0HR&8(s<DQ*G*)*30^-=.2_-4;+f?S)J!,PV\n@5OH:4DS=14je[[t<_&$@J?3YB<%aK]1^lq__-X1a7]Xq8AiK>3;K?
%SqH15+')tQbDr,WH6;^"p2DnkI6G*d'F4!2LPagBp\.>-j/X\=!Z*9s3/(Z]qli3gM9>7g.jrIPjpd[1#Q++>on0VsF/dl0QoJ'7
%YtWlt(0:k#;j%J:?=(iN'FV#D:/?3lC^/+tk!(Ji#Gb8ObjOkqGO:f:c*+d\K5ZsA]rq[]R$*@L:@9.*k4Y$2*X4R8AuUu/XS$b2
%DM#9`SdFiFAdrRPAJWbNmbO#;[!hM!E`b67/72lgQnrZugkJ:GVitE4\q@(ubocW8a2[*91(u9Y/]]"Dh&iVBL1P.Sq/lAKk'D#j
%B&3^CFTMlrI'j.$eUFcJ2=peWATcEO2j^Z=akkh&dbW\E*EL)ISsm:RWumTfeednHh:ZR]BohZDI:8D7b*a6Ep9JCKqjAnE,gr.+
%F#2KHFipV[Z.9SY`fMd\DfbSXh5B@iKl[ML$9rP;OtWa<BQX"*_dY6qZ"'ot[MfikaU6mS75$@dD7?.jqIWa\=FT-'>0U-<iOgk\
%kmrm$IkgQ*oa/&d/[XE=VHCZb<SL84HV;cZ<5_eE^:TbLV"QA_HI/Ck#d@`"^E*OpKr`D=F6J)?IJQJ-E`t)(GLH?'#Q#Sj5oJVc
%Y!KJ4c/Mkh*naBiI83^g^4_hf(dO4ImES"F4_L^(`@43/bFP+QLfftjpY=%..WabHN&r'JJL`hh=F@p[3tpkD01St:NFr,OlQ)Up
%14-@>[ESX/>S6/DjOsdZ5$6@<*l+u`k4<&2j1I4,&]d.)!FNN\0Wb/fiRGo#imkus\,7hV/DCFocK@-aB;TCaUV$R905?[]?l@pY
%jkGh$G=/mOYcR9e$?NQQXhNZNG]g0pQg*OkrOufJJmkgqp\Ud2-A>Uk0XVJhmF-E'j*Y]tdu[3TXm9l^hqg!95OE;TX>cb#k.e%E
%%MLILkKO$sjbrj.pSY6UB?AcJnkK6t3P(`+TQR`?YI3J<@D7/%JXc;5b^ij.=DRVC59\msF>f1rBqbiJbOuqaDnc"ECUpXZj"C]@
%iV,OIn'</QriltYSc5=:NLZ6$!Y(d[i<8fPacLL5_*m,MrQiG)lRVd#a\r3q+3;W^p\EQrlZTH1iM-YOmI"LgWuLG7L.'&dD/Z=X
%l%Ig#McOG&WN_Xoc?AiaSG-l33o+'I#O%l1)0/UQR_K<8(COkQIk%/?n@nea&7U46Djg=Tc7CFsDDEu)U6jb;pRteu2De?8rTlV`
%X<`27'FloEgo']'<W70FLPn"\)SEiN'?+5=U/oL7C]!E>5?f(pE:G)-*$mCfT0>Ho-l5tUIB>ThQR=tmQVO8Y3p:[hBIS!.Rt<dZ
%9?.EVC%q%lZEj6Y:1\"=Z/(pS-#;hVhY]?;r[(.Y!O#Yi@>TIECug$pI=-B$d"nn%RtH*'^UfM5qKi177IK[.d/QpYjnPqs3H'CX
%CqLLFD8LT9)hLkF`Ok@)>,XN'FcEKk%.`_N]j?0eVH?rgq)EX&(A[>f[^ia04Z8bB&$VQeSC%=OfpW,Ck>">PGIX$T4mYL!B\kYT
%WOU?f\6bXU^>DP,-SG;lgNGM5`,7qE7r'o*F6Kuu]D^`fBdE6gN#2hdDcu:(r-3Np2f8$B0#+hU)+!$iqQ+^A3Blb#]$&(WNTpfs
%T\n.$SE?T392$T8F"0\E[u$X.l']?Q/tYD5[!&(pZ*FjMj'NkU/$#3II8Ysd#ej:T2+<tIq(mNna=Ur8KrmL[):f?W'T7/-Z=k<i
%?)0Xu9<CP"CB<aTeBAJPIEIY(m37M,\(s_>F#uO:%;:5A(e%pQJh"+8Zp!Tfg3PaOr^BaDB)R*n7SNkc[l=1<SI\pBe,E8#"4Oh>
%$^GX90:uS>r"-s@D%-&aAkd'udLCO";1op1T/Y(S2$LfOFHLF%oLG?an/J)chO,Lm"*>R\9+/3Z>q)g\X4UaN0scj/k;nagCR1hL
%jYql4F6/T,hfFrEq]XE:7sIg>!cRe"RJh<.T:b$:;&',]_a&B,[bah=;h`@!rrOsHpYB:%fO%ED+@"HO9/N2G^26V>6$@bHWt8u9
%<3Qi2]9&`hNbk9m1mUoEF$$#V5_k[6:Z8En_gL89#crr`@B>$>jF37uBbY4P!'Np@@.XT?\bm]H[1HZn"_MY[G8;YuM67MgqE2GM
%o*mLCYD`(1V%k';$EW5eA'kO:kr7&OZrY6NCV;pg87*c?D_<$mXJ9BG3EhkdK%0ZR3pY<<9c@>9&,i=;`EhXL'AR\Eg'U.%n(D#m
%*J2)8\U6Jp\k,EIT$8p'/`]',C,oDXpgJj]&<%\FMs2,sqn_3pqRd^C1c)"t^arn5D!8fl+D#+GF"j5@Z)Q!V@Vi!&(+OqI=.*G>
%o`7EK5@J*,5..,dqbXEka%$rd!Vqm_ceY-n5@=il+hb2E>irN(<^+V%cH0Z8V\RBRL%OrT&O`F*DpG`QIoO5JT09tFI+ud02nY?A
%9.lj6HS_QAnlqRn=T:dt1X*Ig9`Ve<jR?nLcd"Y?aF2@c4TE=Ar8;qX?i;]`J2D!67rbA-iC58EQ#osA4`R+Fj#P0JeD04Dq2hMD
%&YLKf3H@r5Y@+<cq09HC.\]SdC?9EV0$irt)[k6Ug?I:)$c]'9<V8S2o(DQc:qXLZgu/a':Gd?#B[%X1F>3=f2sG$SCd`.W(J\B1
%O/=_8Rp&Va\JWF]]1H'mD;RgAmP2YfQNPUn[n1OYHNWpk\$V@Ci=S(Ll3e]^pE^BbGnMWKU8G+i@*Ru(]o9Mm[A+I7WP5[1<Y"`-
%ou5(rr3reE-CE[UH;esNL<`s?-]QQg(a'mr'd1N=<\ca@lZh<pp'ilfa831;!S3.lI(=XQ^;gq3Z#Dp1/;3D:iUZX/#^jt8[itOu
%rmB$e4a/f\iqJSRM_k=nG+mpAGhMJPR6#&!m*3q24^#e]K32Nnp^+%uj&ogL>>WMS-dI<U!qjb4>37NrS+V8IQ+q^$%!ihtY8&S5
%:f<_[N:Z1Dl/?^_UAf!r1H.m]VZ3k)2+Q&5p2YBAl9]rpOZQ-f!N*R)IA/^7Pmq\KG0f=*RL3L=FC4m#3p*AIiT@B&.5r,SI>5SV
%HBhOB75<mTUu`D]8NUNA?Ct@MPcsQ=1T`>!GDk)%(H,$Gn+k6&\#/G`+F\ID]WnfWmk:4Qh1.=ZOiNJiE85AJRTL]Pphp?rI+R]^
%rmJa(Mfp[tiRM1AHS1!)2`D7gl*+6fXKDZ)UT)PZn>L=*0s$pR-4PB-a-qJB137\Al!lCHhc7'#1VU=N:X:_?iBrSDNQ-K4$dnA\
%^[cp8Yc[]196)su]ZSVRmId.X3[F33`'<NUFAM.prb0Q\/ZOE=)Eq#'mRN%VKB>n/>]97@d"oDi,N&L$`Qm]#Wjf#)rm7"?HaM\Z
%[YO7@+46Ok<$HD4Q;8CncaD#sk7.&9^S9E<TWATUm6/W*?]Pga\RY8&FNZmu6)X6bY>f5KnZ+L(9jb*N7'"r'':Z^&S_NO4]5lM?
%2l!'=Fe;V_2L[tGmYgiMf?R<2GM+dpgZ@jUI\Oc:Vo2!(_f!/E9hqGG*c2NAG3G-e7He9Zg]+>1I4.8MPgd^.fk7e>O)2E-bIp''
%:K^gfT:uo,flh>i(qu%AWkDd?p_aHpg0mFRJ#4JW%";jD^NGl-r8FH<+"<uP_bUniaY>[u-I*![i>J?*-Vn?"!QU=8^V$r41XA"Z
%=iML4a],k=RrY.7UZq#d2JYf)JD"U9@(cefm'[l+-Qe!V%J_K*O&iro*CNBq3dZfIen1`2-!PeGm]Zf@L)D"RKY;[@`I)6$&?i)u
%g&.j.)cbg#^TB_AN.YfgO#$_1p$!j5j?/++E"_!bWOjfensS)6?h4?Q_Y66(XVUC!92V\-A7L\EN](NPS2Oi;m#H7coHC$Y1Cr*W
%OS>A/iuj))q"0c[1#2,::Jo(m?#MkgNU'L&k7:b0J?1k4jomR2TO2S:bM?g^E19uu\^OF%!$0pIZSCqYB)T?_i2:`8r$eJ6n^h'r
%14&%HdFQJm"&k$og.in-3#.En%t@Q>'8b38;?k):8/V@"=M#F/TC%3WBg>U!"!X7M^]h?dLt9`AQ;MS*G(u=%bT"?"&nlhWNIDfQ
%<?e25O4Ym#NA>;D'@.O!M8;?[[AGm]ggPss>'YE$Kd+MrF+.L8"6an)<ct@t1Bsrd4RbKkH=[gDY0sFrSmTiRra(em^m's3GM$&D
%Fh-99IkLJpT^pLi3qNI2f,]f/d^hn-lIbY-#q_gUQm3sl:ANr1'NR;m5&inM^)ujl$N]LDaUZ"n[$NA-d'2lPYWYdp+J<iJmZ2(>
%D-/S`WC>9Mn>jH%%mJ^g6[I"]Y5k&'jX.^snOT6%L)mtE;t9,Br25%$_u:fEp:\g3i/;;rDEtsu^nrd39G**R_dLP%p0%HS^A?jn
%Vu6-&QdTs5NTRi;Zr`S4-#q%6CKcnbNrZK%m3mBrB>7a"GB@Q@!*@!ernfL%5h8Z??3nt4\1[*7Jp9S=G[?3]_B9Qn&79+=Ea@-O
%5ZK7kKEU$).6FbN_dO16bM9]o"N9C7`*!*dH\9!Kre@Tj7-C^?co`ijfuM]s#**1Tp^Y\*(&IinVCi@NZ!b2(Do%,r%*Pn,%kp]7
%0sW[dSEHaNT@aS,"a%p2G072uFPj?R\/Bg-QC%/*#JSk:7==)6Vl1'J$ltCZ8H_5;L?XC%'7:&p`&3+6mofE$%-TMj\<`8Zr'i?F
%YO0;\%u?foJY)7n#mcdq/_Xhq4)u*RQ[97kJCq3.)t\.Lkg=+Pq0GhdTNsb9MQ<h3Smk:_C;:DQG@=0O4gm?kVHMa9eM#SrqVdh'
%4^pukBRSODi@jg@TD\fbhm#F_4sh6HNLjZfhim#B3-fYiN9Qt>`?T+tpm0pg'Dg/tbo!<f!BVNW`uB2$*L*]UiRP@tWgQ!.BqHpR
%Nj9h_%oPTt+ePPma)Y91]Np9Br,:0<>\6>c21LF#Ve*VWh8E.Y$9KbEU2m)V'42&B>k[k/0d#c6cNjDkd*1Fekk[p!s&4:h$JB])
%p`P:t#AMg%4gSZGLPQD$*1ioA"BTj;:&D-W@]T9.O%e9j(U/0#0MP?G_p^*M:KrB/+1g%t)2"M@p3kXgq9D+D)?NS?rb3#c-T+5(
%1%N,=Sp"KGs%S8&Oeg+)TZP-FBuo6.i%\MS72+;,C?A['F?+H"j,9=@_X_<.c7=LF(nW0B.#6Q0B-keGE.Qo.=TFA2*<b6'(!Q6]
%PSr0u_tAEo^+b$IVT&Ks['FL4jg_fUi2Yb)2I4(:aWSr9bHpDqi<*kR=Q*'p\A6b2"jI.A/mj0pEp\r?*P^Bhlta36W<i!IFd&q5
%VB>`j@]6*9.7c"=qDF`]&jRc1m]#]4N77L)>5]DkLK4=ng#$^i-2[PAN3L.u`D?.#&Q[t[Y5.OET:VVcs&J%,^I7PN%\K>!0#n_j
%?!18/L&`^-&cpM!Il)`qnV0bd0Gd'WFh,.ck1ccG/;[#"<sg$T8^uXsP(>o$BZKlT$V6)YoOgH@%Gi2mJjEd+*rZEtSQ7<CinME#
%?PiQSm5+)4X+)"iZ2JP@$Qso^B_=@dna)KYKbbD,_RriU\Y'ESQRC[@?iUsj>]`mkZ%04^<%&D!eg<o(lkH]I'9YcE2.m&SJH.-A
%a86+'Ro(Ybb3a/5Z]_+,.E>d^Li#Fs'*^2:`!Tn`C-iSi<C5\K8nn[[`Kib4PU%LTJt47!1p'/)IoCBR=/7Ah68s9jWsJf_l`jRo
%UL=bsO$GhsZ=#M\+$b?ED=,l51AEV3Bi"5`?q[`R'"r>42?V,&WC#'bOgS)1BSE,l6<*$nR"kbt-FZo^?muZNe0C9SW(;GHP/BPV
%_h?:E@l,9/faW=_B\*Rsit7Yr.L[K?'TrVH"C3?B=@+bL:m+D3kd7.[!/u[[Qo#+nXO[CnK6T9p>mnMBgYm?)E26!LU/s8Tl[\X=
%9j?;,!4X:c'?<O]":4T+56qZJKOC'q1P%RL60N*:dr6=#?@t^an11`7.MVA62CM=^&D)LAc8lGujq7(93:'(1PZB"/"MW72Bh=(?
%.GN:h,o/&&2@(ViPlONdKuCrmA/'RcdU\Z0'CXn)9Z]"`S)2CF/_b@2+pD[RaR$hm0L!<DJ+JS8_6E8;]r:(@"<_ebDWk#!9+X\j
%+j<$g#)4bHC^^qUQs:,uVXb)Dli_hFCT2uti/L!3P(^L1>X6C4,jd#:[;d%LTI:7B!-$oeCcg/"_D7BsCm^>O>QSn'E<m@^?>8Ck
%R#jbb:]Sd3'3H/M]R0Za%LNhXD#n?#!3oF^@o>CO+@#r`2-^Y-8dgkM+>*bFDNJo&PigR4XO*e+cR':c6)m]C1aaHM3>YMm!3)g=
%:98<I^S'9VU7r#g!a)p:4!lP1+V00$',T4SR&rtcFr_6_JY[OBL&u<`R_WZpZP.-2Io.$cOfl.*1_h.?;@oI!bt='&DD%S*[:t?E
%\!Z+%I@+*Q?(&q(qqu)1O=1gnfN4k7QbKo4`Odl8]+GaRh$=!8*LKi8W3[cs:,uC5kD'VuTQ:q?8Ur.\6IH/7)?V=][#B6j`oM/F
%`s'XShdM6LIY#J[F02qc+e]EIn]:>">$E[#5L>aXV?1E=R0<%[L]@V<X&TM>MMW!:?cp1UckJqmKl$.C7)ZK:aok8k,7"otgM`RE
%TVsVd%Nm*cLJMCMU/c_OJIiY6X-=Q2hmpN8TF%]]\29'M#=qmaaJpKs,Z_DSg(5^;oED(j!2r&E"Uu(IlVn_R7c6NSi)&6l!*ipi
%Va<GDq).@rUhR#cKJj?&3!FTPR=L<]TTT@J_hrY]*0qp"8kY?J8@pQ6.-Vj*c4cqo%lq0f>YP5=TPK(1KJ8RH!\dB<%]!7H]/M&u
%!s\p_O6`*k[iJ/dNX0(JcUL""f/Eft$FSMJUj@%fbe=_%$GeQ=Bk-rn.`@(-7`a"fH&]qNag,CWZ:pDVEZ,;#=^ZDh-M.4USFLd$
%L"c$e5^6f7NlCf*a=9P!oHC"T&0X%:%=sEb!LeBK-MoF[.#;9,M^T#[*,gMtfUh2XCl>#*@U'!I7Mn1+`rZjZ)q*XL*K)V=?YYJ[
%!:s&N5X<[,S*Xa^KL'Kk](iJNF(F'"jS8A])!&cH0*/"b$ZfhkC.LJcQ"1"_n3Su[@3lA[C'EbpMZr7<C4V%'P#(hPl'qhhens=;
%Pqm<RVb&#rOP5d->oaiP-jN:@&gB=#)GsK:o*rhHOGVXK#"jo.D^NNOaeE!Oomk-h$Sq+f:>&ujMWSP[VX!C--QjNg_0`")%;&hS
%S6CYYo1[km<n*4IbbW2mXmkjS>%0IY,XYd-6N@66e8u=(dU:5kigh-Km0Srup&kL\DCQntN%pW_8:\EW."^CV`":KbV?qOIX$YbN
%OVAf>@GGs9.'nj+E_Q9OA>:uO!pAWje;&aD'DV)+:Ui#!N5lQ&iNKUVUN;SE"pqP.ggOWtE>L;:/;F!^#P2gPX901$3EQ9*0_<:1
%6pOT+0$h3G)X\!+c;Baf&C(j[/RZ`JS?WkM,Y;Q\!^]"G+Gn:%/##W!c!N(bmW!2#TTufULb?;+'2g8W'#GOOZKn%m0P,aZ>LXlk
%'DKe&mg?/CEAT&?hoV)-b;Yt'>TL;h?YbQXkU+Id&q\4;5-n)6?kt([\F[a]"'09SLBdn4_cmkC`M:<b&A"D>e.7+jNi#bF'H;@6
%6XO!PYu`G$8S)uF69Kdc5nN'M4=B6@`@5NK/;W[q8m2PKV:Eq7.\=Y8MlU[:I=oCj$.0P0H3dn`>2XKh/$t[LKUs2n*?sSKOD^`a
%GRj_6gXImb7@WiLIAL[n&<(ltb@O/>J0)4A_t$7d,/DtLU0h8.0/s)Wm*"sR7)K:ia3U!1]]RF7f8kG.%B,4<hY",jSKOnj:-c$3
%8qR291P&:]T&iUn5\:*aJ7U6Z8;ODZ%?4#W;%aGV:tLLY_0AbrA:fme@c\UC,2W_iRMl;mYJj/djPf5X5O$aJYq;CeZ1KoTWBiYj
%X^!d3"jG$R$G@/4=hYFHikl4Y-i*ZYoc:7V?XO!p$Ul<I!>'WTeH2W7/De.HfU3k]lqBZRFs_dg3eYl&JqVc26fWbK/0U:Q,U'ai
%$)"T1GYc@hB,G$E\1\8M,VVq(-g%=3E)X8`4m(d2h$>S_d)m;P&R^UMA<?q"3[rY]G6t;R3(F5^iEpun%ff]6n1=r3SVFKSi$tO!
%jS"1a"E68td4e_`:n8M_,m@J;"#!1VJ1Qis#s8JM6=7i*E/ZNrQU4<#/u:lJ&h$Wb_Kb<c.a&.<>Nmgb-mphd,W;?iOV=+ULI5sJ
%VG.jbl":tJ_7RDj0td-U^I&&3.eNC&W2W':]`oS"FpBF'#a)*E[N]H.&BtGDDQY``nO#Q\K7GDN*st`,56NDE_E$Ts!V90n,MptU
%fU<q^$r0&YLs%fZ$>Vn3^+i4kdM"=F&4:Rh]nGUtCM70AKHR*W3(I8#AUO$NNpA;C=Gt)F6J$EqmKfC4N9?3g^"9Hr`B=iGZJ6TH
%(+@.Fl1Q&"6a_TcYV!+U!^eW.[C/Nu8an60[jC`>#Rjp:1'A$mi/CLaG-\K;khoRO8sm`KL4nJ;#Kjdq"2\"C+hj1='De4UPF6jN
%-0DrL;,hT?iEUJ]eQ*"J%;Hg]9^lWJah!4[KFT,N9OJ0ZBk:12n^JUl[M,*C4$9hc!*$GF'75SsnEaDCOT<Z7ea4VT)MpY<`PChN
%8OGfMm\^B.(h;Pj_A>7$a\<aW-ZRJ*'O3tHaVC8+8s*!_`_`"-R@='ijU7-RlB^m`oL=rLJ7+$\MH.uOTck>BP:Ts0#VKS[+4@0g
%!a9^?#,k',/mql3LR;mZ'J9Lk[I&jgKgO7E\/H15Z)b!iM4T^G[%([c6:";V&B#F'bY<d&N[S=-kX&N`4%`T]d=p,tF=OG&_hD+!
%jLiH\$Qn@Ql?Z]S1`2(E\$>2b,h'%J7$dG"H`u<OJbJ1PM\ld65TF>r9R[<?;SMVYklDhugZc^s(T9X@a3o,;U"_JNg9.-+@YCI$
%+G(bOhb2NO&j77n]t)7RKnL!rU_.L'1BB=7,<RD;EFCST4A#o5+hI.]R]'%28eSuYlG>(KF5NX&@0KCkBEEuoos(gkg/_n7br_#a
%d3rAuVW$(3h]m^Gk9hbs&eYhIMJNCu$odc;1q<:*2G\6EHf-JAdk$uT&0(bgZ?_-mGabc`$&IMp"$i$7N'onN@XW^2Os)!e+co!Q
%\Ej?!3$4BbAB,u/B=X1268[@1QB4^9;@q,M(I$CXOt:Ms\j*@0"0auK$L%8Y6[]aFC>Tq,i/_HJ^Xa)n:es^R!pkFKi\7XbG#Gh-
%fHt^L6\#bski:Jr_M\BqJ3"3c%6u*@T"*=iW/,6*K^M`6(-:fe-D.`<G>\IL3/q7%\4VRU@P8m7/4:.<.PrT>,c)V56jo03%XZE6
%VWh48=kkjrZ7sH2XWWRh]0pW_IN.3H>,(Niag-YSBH*lbN,O3S"-M1+rR#d:Z?ip6g($PL09JX,0??\7g.)#H<mkBu_Lf&E3$_(,
%CJo!H@bN*1MZ>OLU+7Im^f/'qU9l'd0m+m$+fZfa+Io40&S61&>LYY3OZT%Upo)1U+]t0D#_,6.U8>Zm\?=eX4PsMME>aPYT:](*
%0(J`CP@sh$a-&:g5t=6E4$78qH;s/8a'\*;+-ekiKK-1YRdA&&#)%-JZ8Br8,b(*:=^6&oWJdouKM78`JoGnEkh>&?Dm>?*<Y(f,
%>^d72eC*mh4J*sd;9FtNQAYZ>dgV,"XE[8AGY-M-9mXQO![/e4n:3(1ii0['0%:-pl<$1?(B@FEbnGS`AFkadOq@]9%+T2BCEA==
%Nl09j8SMlO6<qk^Z0W<?N1=_D\Opl\Eaca:7@+QkG(jP?.MQEh,XcV$V2oc::6n3Zr?'Kt)hbq$mf\<8):1GGJW8XJE1[m"_=ie(
%d0AuK5t"%)G9g^G)\`^N&h`%$btA2B8aj8N%PJC_CE*J4QNndnf%a-`;=0CPPU:]5(43BOKb+R<DfR>#\2>_SPd`<BT__AX.B8-"
%;fP@phBlPZ>I*-q#7$h98s_[kYR,c0oYRm3iUN9&b^QN;g6%RMHq9(e`0,`BViDa`AcC\?,Zk(MiibMPjL@>@=%GHG=&];f4i&CP
%b-7D@=$.a"AQXsng`U2?@n[7HQ;+1-k[kt.d,^K(?#U6IQ8^'8XTX7RFO?A93H)/mj.C<n?F%Ek+aO;n!I=2M..R_#.*Y(b_CHU0
%"kW9iKgT>FU;A&Z8UsjaPsAnthUj=uP,,BA!?iKb<O+45)UM43VX#bcnUU\tEZHI<KP7YA/0U:QU`c2$0"eJKmgY-lVX+'o]d4!4
%]m,A(nWpK5P6J.+KD+DBaX:C[[ci:7ULMW'(r4&L`:LrC%0sPYNHQIgC2a/fP_bkK!f<k8)2sLS#WAX-,cmfXP_&YjbVlG6d]?8]
%$O56oRu,fU6pYGK.`!9?#9OXpP"UT`\jDTi8Q#o4RH`-MC\#N9=U$$[+gfBfbK/h%S!1+4RU4_S9o1-R)%tq[`a&4VU4g?6$=.cE
%K]hg<LSYRg-3BdQ$NPV)SnIL!M.bq5MuX,iW7rFt\4H73/>bguKaS212Ek:]`oY4VpPBP3_=;UI';?$e\,b`E.jS8j&Tf9dYgZ$B
%AjtRNC&q@%QS.biStC*anr@8YnaP/<6-BUu<=0%P"'DDPd3'&+hUq@;^4e[HL\2d36SKG6.j_Aq]-0u!"jAiLqCQAOJ7+$X31.hY
%7&#<D0rlF"Skou@2cITSI7Pfo]M6MDeo,+lYpE5(,j@jUG#M>UUeq;6:n3WN!UrG]T;kNY*k=KdrWr<M)r]`jk+gBU"=/Y^d^?$2
%,n,"\RgsZYf+a:3^_`XZd^)%VZ+HGk.X9<qGdKl5=n4ik5tXBF6[D!gZ6k^tkW$dZP#R3>8;R!;S-"S'hPBZ3_)NmVrqr9#?D.\1
%'Ia@9StAqHH*2ks(-=8M,EBsTP2ulSdF(Ddis?bD!rF0>5hG.4\<\MZU;sQYKqqSMA*7(SV6VF`lkKas;H]36kf%lXa=H[V;H]9O
%U?]^E.BA3#;mG@/Hb<DAA%b1IiBJ&U6,sX]"pr\c<%AgC&FDM0i>+MP?&.Utg9tbJiT[d;&p^j[+ol@^ocmR1K5"ueN4nqXA5oJq
%LcPXPMS]b\Wk`*p69O:*ke`+?%2<V-AOqW[%1S:iV,7lE#Ji*k&9SK/S*[R;4ds!n^1.ah4-.POZ#oKCNR6V=AA(8qHp!m_Y_ao>
%%N`l0JFDNZK_R7Q+=;e)PWohu!N9Ig585;\4RlAV-R,`S,Lil_/2SV53#9t`PD'2I+h4t7EQ/,_^b@$+C:"3f1H[+pKP5BV/0U7P
%U`bVg0"NehpC57R2W"Su5i2l4o6/2bi/-K??I]8)b0pm4o]Ql'(2i"ZYtGL/n\I`Ij4Q<nVBPUu*`'3J!#=ej>[&EJ4GT55"@01W
%IJV'KK'LifXN8j$]_&FkJk'daLT&i_T"kqa8k;;<E)'(gKTm+DMlG'N=XarY'SJ9k,up8kNVi4'd%k02'A3tO-@'^PE,YC&7VF]/
%ZD8Td3;;&03sELUW%L%BT-r2Br#9t?apCkF"TYr'G[de:`2T)TN!(h8W7_<PUk+b5q.$T_8<V-2Hs'4[,80!n5VGI51J(=!7XGN<
%=/cN5d<2.VM40#A,pAePXq##VrYlOh+=.<W,9/T_A8BRScDD\`"*TD8h-]%J/WM)L%2,E&.$QEr&'tdHl'Qk%TGt,q1"CG62j!34
%$CjpTk99'qLpipP_N]n>Z.Bp?8S)?4U=Vjl+KoNPa^sRt8Zl,bV;qtRaJA#JLoQJ-TX$9B"r2oCi\2H5HrPM*&FD.l#ns6+J?RtO
%#C]F/)iE@%3m>W#7HoB@?k)1^#>R_i[)78:9\EQ.rk_%tW:1oPq@c=:O?Xp7"_Z-m8[7AE7T*n(OjZc-)FQ`!,_=+T_DeDPr+Ekt
%(s1i!RK>h2<.I&790+W>4-QT[SqRD_Z4N(C(/MdN!7blT**aY$'J.3(Q"oOgC78Y92b9+s851CoQ,4(d-7<mK?RDNN`KO:fVll1^
%6?H'^1nBN#fPk9LadV?2<#bfCpZ,K!b(G@4`"YO-8];Duc[f50i@>7;[dA@%)PQ/,Snnc7Wn6CD[R/t6[%bD<Jeb<=:0&5F>o\c2
%=ii.GKFg8DRBR,e)A#8]#\JeG`-,$%*apN%QOmGC%8G=d'I=(E%!CNoTil;1Ab]o`E:o`3bs=Y&9rJsKh`U0a49:cf9Ke.Yi;,W:
%cXdEm_K'3f5u<^UD&]L0-7mF[HgsCb<#-i(KYB4+7@Y:C:>*/5;@62BH1Z)H\J/@:1uT18O@iAJ&C+)g?<Nfi(6<87%eW:?'26B@
%Y@`?1KV-TeprMYeH0^gNU;c@ehr=lXZjbVT)tXcD0R+"`b;4:.h-j]dSa]$Q!)UQScdO2'-_B$'A0c]362c,OEeHC&6gm2:^jCA.
%8Oq^E/R!Bn68/[-ZUbE0M`Rf"*k*cE&H\\bWR-;(MNfL_HZ3T.Urnk?IG4Waj0lU2EC)uS_X;]71mj>N$U`F+f^E5.9eSd*`I8%%
%5\9h%^Onoeq],eW!>)n?dseS<Om(h-%*M;p,*[mk)%_1"EOkU^l)6]j3$`X?76F:b!JuZ9d"LbKP_*k7](F]2kARWeiLfXBI^1T"
%+S[W=?Qpd)?R0#FZK)VfS;)l=c_7llTatnZCXb?V:MM;Z5SP4a.1+rA;<L6N1m."c==h`nQ6mkFhdN:1@V:W6So:4j\Erca(L>u&
%=s8LFOUuAbN<C_PoA="5KFb=04f$UdI>8i9l+$YEM9#TEIa[Pc[7,-EP/R_6Z!_b7CJ.;=$oCI]']]EA7o/q]J:W(jZ?-RANJA]R
%(J#]F_'Ks"&A1iq8Q\Q:.I.A]?EfM:Q1YFhZ#PC\gXi;'+V0;Q;cAD[JJLH>UU20e0m-#D+dO=K+Io40&S6L/)cSH*?lZU?#!O*[
%N]AC[Ne_5.qW@W]C5KqH5,r&t#Y\S<YY(^C"V@#f0Q0<U`;kV/U&[i_W+']GB\PI7'gj/o$M6FCO@*9$,n7n%`<[Pc0pJ1dXq:t+
%?$t*A^:-a+MS%e`>U#uB&u*RLTkRJn[%%XC=.)t]#'GlS`g?L5ZB?@Sg+tr#`ZNq)/XFfUkBVH5kO[u$++-4+c/p;Z:XTsa!Dj=,
%4G&hTR!Nh03VLmU,cTW@+s?Y#O(5GMI5R[]!cLK&+p`jnoIqbo$45+FTqTRQ2C0XUi='j_W-=&bj",&[jJB*B7cVY#?h6`hnT*B.
%DtRjI#RolZo*o%.>J`<<B/[E'6E=9>s,=Ms$NQRL/_?`7DRnV[]'oWsou_bR7_.&apRtM+prTIWUL(^kNJu_"q_*V1,M?IFZER8T
%pW*:=+$KLa~>
%AI9_PrivateDataEnd
